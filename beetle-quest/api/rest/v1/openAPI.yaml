openapi: 3.0.0
info:
    title: Beetle Quest API
    version: 0.1.0

servers:
    - url: localhost:8080/api/v1

tags:
    - name: Auth
    - name: Users
    - name: Gachas
    - name: Market
    - name: Auction
    - name: Admin
    - name: Report

paths:
    ### AUTH ###
    /register:
        post:
            summary: Register a new user
            tags: [Auth]
            parameters:
                - name: email
                  in: query
                  schema:
                    type: string
                - name: username
                  in: query
                  schema:
                      type: string
                - name: password
                  in: query
                  schema:
                      type: string
            requestBody:
                description: User registration details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Register"
            responses:
                201:
                    description: user registered successfully.
                400:
                    description: invalid request data.
                409:
                    description: username already exists.

    /login:
        post:
            summary: Login
            tags: [Auth]
            parameters:
                - name: username
                  in: query
                  schema:
                      type: string
                - name: password
                  in: query
                  schema:
                      type: string
            requestBody:
                description: Login details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Login"
            responses:
                200:
                    description: Login successfull.
                    headers:
                        Set-Cookie:
                            schema:
                                type: string
                    # content:
                    #     application/json:
                    #         schema:
                    #             $ref: "#/components/schemas/User"
                400:
                    description: Invalid request data.
                401:
                    description: Invalid username or password.
                500:
                    description: Internal server error.

    /logout:
        get:
            summary: Logout
            tags: [Auth]
            security:
                - authCookie: []
            responses:
                200:
                    description: Logout successfull.
                401:
                    description: Unauthorized.
                500:
                    description: Internal server error.

    ### USER ###
    /user/account/{user_uuid}:
        get:
            summary: Get details of own user account
            tags: [Users]
            security:
                - authCookie: []
            parameters:
                - name: user_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: User details fetched successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                404:
                    description: User not found.
        patch:
            summary: Update a user account
            tags: [Users]
            security:
                - authCookie: []
            parameters:
                - name: user_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                username:
                                    type: string
                                email:
                                    type: string
                                password:
                                    type: string
            responses:
                200:
                    description: User account updated successfully.
                400:
                    description: Bad request.
                404:
                    description: User not found.
        delete:
            summary: Delete a user account
            tags: [Users]
            security:
                - authCookie: []
            parameters:
                - name: user_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    description: User account deleted successfully.
                404:
                    description: User not found.

    /user/{user_uuid}/gacha:
        get:
            summary: Get gacha collection of a specific user
            tags: [Users]
            security:
                - authCookie: []
            parameters:
                - name: user_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Gacha collection fetched successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    total:
                                        type: integer
                                    gachas:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Gacha"
                404:
                    description: User not found.

    /user/{user_uuid}/gacha/{gacha_uuid}:
        get:
            summary: Get a specific gacha item from a user's collection
            tags: [Users]
            security:
                - authCookie: []
            parameters:
                - name: user_uuid
                  in: path
                  required: true
                  schema:
                      type: string
                - name: gacha_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Gacha item fetched successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Gacha"
                404:
                    description: User/gacha not found.

    ### GACHA ###

    /gacha/roll:
        post:
            summary: Roll for a random gacha item. More the user spend bigger is the chance to obtain a good gacha.
            tags: [Gachas]
            security:
                - authCookie: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                amount_spent:
                                    type: integer
            responses:
                200:
                    description: gacha rolled successfully, item returned.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GachaResult"
                400:
                    description: invalid request data.
                404:
                    description: user not found/insufficient currency.

    /gacha/list:
        get:
            summary: Get a list of all gachas
            tags: [Gachas]
            security:
                - authCookie: []
            responses:
                200:
                    description: List of gachas.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    total:
                                        type: integer
                                    gachas:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Gacha"
                404:
                    description: No gachas found.

    /gacha/{gacha_uuid}:
        get:
            summary: Get details of a specific gacha.
            tags: [Gachas]
            security:
                - authCookie: []
            parameters:
                - name: gacha_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Gacha details fetched successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Gacha"
                404:
                    description: gacha not found.

    ### MARKET ###

    /market/bugscoin/buy:
        post:
            summary: Buy in-game currency with real money
            tags: [Market]
            security:
                - authCookie: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                amount:
                                    type: integer
            responses:
                200:
                    description: In-game currency bought successfully.
                400:
                    description: invalid request data.
                404:
                    description: user not found.

    /market/gacha/{gacha_uuid}/buy:
        get:
            summary: Buy a gacha item with in-game currency
            tags: [Market]
            security:
                - authCookie: []
            parameters:
                - name: gacha_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Gacha item bought successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GachaResult"
                400:
                    description: "invalid request data."
                404:
                    description: "{user, gacha, gacha price} not found/insufficient currency."

    ### AUCTION ###
    /auction:
        post:
            summary: Create a new auction for a gacha item
            tags: [Auction]
            security:
                - authCookie: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CreateAuctionData"
            responses:
                201:
                    description: Auction created successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Auction"
                400:
                    description: invalid request data.
                404:
                    description: "{user, gacha} not found/start price must be greater than 0/end time must be after start time."

    /auction/list:
        get:
            summary: Get a list of all auctions
            tags: [Auction]
            security:
                - authCookie: []
            responses:
                200:
                    description: List of auctions.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    total:
                                        type: integer
                                    auctions:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Auction"
                404:
                    description: No auctions found.

    /auction/{auction_uuid}:
        get:
            summary: Get details of a specific auction
            tags: [Auction]
            security:
                - authCookie: []
            parameters:
                - name: auction_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Auction details fetched successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Auction"
                404:
                    description: auction not found.
        delete:
            summary: Delete an auction
            tags: [Auction]
            security:
                - authCookie: []
            parameters:
                - name: auction_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: auction deleted successfully.
                404:
                    description: auction not found.

    /auction/{auction_uuid}/bid:
        post:
            summary: Place a bid on an auction
            tags: [Auction]
            security:
                - authCookie: []
            parameters:
                - name: auction_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BidInput"
            responses:
                200:
                    description: Bid placed successfully.
                400:
                    description: invalid request data.
                404:
                    description: auction not found/user not found/insufficient currency.

    ### ADMIN ###
    /admin/monitor:
        get:
            summary: Get system status for admin
            tags: [Admin]
            security:
                - authCookie: []
            responses:
                200:
                    description: System statistics and monitoring information.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    total_users:
                                        type: integer
                                    active_auctions:
                                        type: integer
                                    completed_transactions:
                                        type: integer
                                    total_currency_in_game:
                                        type: integer
                                    issues_reported:
                                        type: integer
                                    issues:
                                        type: array
                                        items:
                                            type: string

    /admin/users:
        get:
            summary: Get a list of all users
            tags: [Admin]
            security:
                - authCookie: []
            responses:
                200:
                    description: List of users.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    total:
                                        type: integer
                                    users:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/User"
                404:
                    description: No users found.

    /admin/gacha:
        post:
            summary: Add a new gacha item to the system
            tags: [Admin]
            security:
                - authCookie: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                price:
                                    type: integer
                                name:
                                    type: string
                                rarity:
                                    type: string
                                image_url:
                                    type: string
            responses:
                200:
                    description: Gacha added successfully.
                404:
                    description: Gacha not found.

    /admin/gacha/{gacha_uuid}:
        patch:
            summary: Update a gacha item
            tags: [Admin]
            security:
                - authCookie: []
            parameters:
                - name: gacha_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                price:
                                    type: integer
                                name:
                                    type: string
                                rarity:
                                    type: string
                                image_url:
                                    type: string
            responses:
                200:
                    description: Gacha updated successfully.
                404:
                    description: Gacha not found.

    ### REPORT ###
    /report/issue:
        post:
            summary: Report an issue
            tags: [Report]
            security:
                - authCookie: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                issue:
                                    type: string
            responses:
                200:
                    description: Issue reported successfully.
                400:
                    description: invalid request data.

components:
    securitySchemes:
        authCookie:
            type: apiKey
            in: cookie
            name: auth_cookie

    schemas:
        UserPublic:
            type: object
            properties:
                user_uuid:
                    type: string
                username:
                    type: string
                gacha_collection:
                    type: array
                    items:
                        $ref: "#/components/schemas/Gacha"

        User:
            type: object
            properties:
                user_uuid:
                    type: string
                username:
                    type: string
                currency_amount:
                    type: integer
                gacha_collection:
                    type: array
                    items:
                        $ref: "#/components/schemas/Gacha"
                transaction_history:
                    type: array
                    items:
                        $ref: "#/components/schemas/Transaction"

        Register:
            type: object
            properties:
                email:
                    type: string
                username:
                    type: string
                password:
                    type: string

        Login:
            type: object
            properties:
                username:
                    type: string
                password:
                    type: string

        Gacha:
            type: object
            properties:
                gacha_uuid:
                    type: string
                name:
                    type: string
                rarity:
                    type: string
                price:
                    type: integer
                image_url:
                    type: string

        GachaResult:
            type: object
            properties:
                gacha:
                    $ref: "#/components/schemas/Gacha"
                remaining_currency:
                    type: integer

        CreateAuctionData:
            type: object
            properties:
                gacha_uuid:
                    type: string
                start_price:
                    type: integer
                end_time:
                    type: string

        Auction:
            type: object
            properties:
                auction_uuid:
                    type: string
                owner_username:
                    type: string
                gacha_uuid:
                    type: string
                start_time:
                    type: string
                end_time:
                    type: string
                winner_username:
                    type: string
                biddings:
                    type: array
                    items:
                        $ref: "#/components/schemas/Bid"

        BidInput:
            type: object
            properties:
                auction_uuid:
                    type: string
                bid_amount:
                    type: integer

        Bid:
            type: object
            properties:
                bid_uuid:
                    type: string
                currency_bidded:
                    type: integer
                bid_hash:
                    type: string
                previous_bid_hash:
                    type: string

        Transaction:
            type: object
            properties:
                transaction_uuid:
                    type: string
                amount:
                    type: integer
                timestamp:
                    type: string
                event_type:
                    type: string
                event_uuid:
                    type: string
