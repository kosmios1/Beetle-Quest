openapi: 3.0.0
info:
    title: Beetle Quest API
    version: 0.1.0

servers:
    - url: https://localhost/api/v1

tags:
    - name: Auth
    - name: Static
    - name: Users
    - name: Gachas
    - name: Market
    - name: Admin
    # - name: Report

paths:
    ### AUTH ###
    /auth/register:
        post:
            summary: Register a new user
            tags: [Auth]
            requestBody:
                description: User registration details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Register"
            responses:
                201:
                    description: user registered successfully.
                400:
                    description: invalid request data.

    /auth/login:
        post:
            summary: Login
            tags: [Auth]
            requestBody:
                description: Login details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Login"
            responses:
                200:
                    description: Login successfull.
                    headers:
                        Set-Cookie:
                            schema:
                                type: string
                400:
                    description: Invalid request data.
                401:
                    description: Invalid username or password.
                500:
                    description: Internal server error.

    /auth/logout:
        get:
            summary: Logout
            tags: [Auth]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            #           - admin
            responses:
                200:
                    description: Logout successfull.
                401:
                    description: Unauthorized.
                500:
                    description: Internal server error.

    /auth/check_session:
        get:
            summary: Check session
            tags: [Auth]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            #           - admin
            responses:
                200:
                    description: Session is valid.
                404:
                    description: Unauthorized.
                500:
                    description: Internal server error.

    # It is used by traefik to verify if the cookie is valid, should not be exposed to the user
    /auth/traefik/verify:
        get:
            summary: Traefik verify
            tags: [Auth]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            #           - admin
            responses:
                200:
                    description: Authorized.
                404:
                    description: Unauthorized.
                500:
                    description: Internal server error.

    /auth/admin/login:
        post:
            summary: Admin login
            tags: [Auth]
            requestBody:
                description: Admin login details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/AdminLogin"
            responses:
                200:
                    description: Admin login successfull.
                400:
                    description: Invalid request data.
                500:
                    description: Internal server error.

    # ### OAUTH2 ###
    # /oauth2/authorize:
    #     get:
    #         summary: Authorize
    #         tags: [OAuth2]
    #         parameters:
    #             - in: query
    #               name: response_type
    #               required: true
    #               schema:
    #                   type: string
    #             - in: query
    #               name: client_id
    #               required: true
    #               schema:
    #                   type: string
    #             - in: query
    #               name: redirect_uri
    #               required: true
    #               schema:
    #                   type: string
    #             - in: query
    #               name: state
    #               required: true
    #               schema:
    #                   type: string
    #             - in: query
    #               name: scope
    #               required: true
    #               schema:
    #                   type: string
    #             - in: query
    #               name: user_id
    #               required: true
    #               schema:
    #                   type: string
    #         responses:
    #             200:
    #                 description: Authorized.
    #             400:
    #                 description: Bad request.
    #             500:
    #                 description: Internal server error.

    # /oauth2/token:
    #     post:
    #         summary: Token
    #         tags: [OAuth2]
    #         requestBody:
    #             description: Token details
    #             required: true
    #             content:
    #                 application/json:
    #                     schema:
    #                         $ref: "#/components/schemas/Token"
    #         responses:
    #             200:
    #                 description: Token successfull.
    #             400:
    #                 description: Bad request.
    #             500:
    #                 description: Internal server error.

    ### STATIC ###
    /static/{path}:
        get:
            summary: Get static file
            tags: [Static]
            parameters:
                - name: path
                  in: path
                  description: File path.
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Static file.
                404:
                    description: File not found.

    ### USERS ###
    /user/account/{user_id}:
        get:
            summary: Get user account
            tags: [Users]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            parameters:
                - name: user_id
                  in: path
                  description: User ID
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: User account details.
                400:
                    description: Status bad requests.
        patch:
            summary: Modify user account
            tags: [Users]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            parameters:
                - name: user_id
                  in: path
                  description: User ID
                  required: true
                  schema:
                      type: string
            requestBody:
                description: User account details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchUser"
            responses:
                200:
                    description: User account modified successfully.
                400:
                    description: Status bad requests.
        delete:
            summary: Delete user account
            tags: [Users]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            parameters:
                - name: user_id
                  in: path
                  description: User ID
                  required: true
                  schema:
                      type: string
            responses:
                303:
                    description: Status see other (redirect to login).
                400:
                    description: Status bad requests.

    /{user_id}/gacha/list:
        get:
            summary: Get user gacha list
            tags: [Users]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            parameters:
                - name: user_id
                  in: path
                  description: User ID
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: User gacha list.
                400:
                    description: Status bad requests.

    /{user_id}/gacha/{gacha_id}:
        get:
            summary: Get user gacha details
            tags: [Users]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            parameters:
                - name: user_id
                  in: path
                  description: User ID
                  required: true
                  schema:
                      type: string
                - name: gacha_id
                  in: path
                  description: Gacha ID
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: User gacha details.
                400:
                    description: Status bad requests.

    # TODO:
    # - internal endpoints (not accessible by the user)

    ### GACHAS ###

    /gacha/list:
        get:
            summary: Get system gacha list
            tags: [Gachas]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            responses:
                200:
                    description: System's gacha list.
                400:
                    description: Status bad requests.

    /gacha/{gacha_id}:
        get:
            summary: Get gacha details
            tags: [Gachas]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            parameters:
                - name: gacha_id
                  in: path
                  description: Gacha ID
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: System's gacha details.
                400:
                    description: Status bad requests.

    # TODO:
    # - internal endpoints (not accessible by the user)

    ### MARKET ###
    /market:
        get:
            summary: Get market list
            tags: [Market]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            responses:
                200:
                    description: Market template obtained successfully.
                400:
                    description: Status bad requests.

    /market/bugscoin/buy:
        post:
            summary: Buy bugscoin
            tags: [Market]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            requestBody:
                description: Buy bugscoin details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BuyBugscoin"
            responses:
                200:
                    description: Bugscoin bought successfully.
                400:
                    description: Status bad requests.

    /market/gacha/roll:
        get:
            summary: Roll gacha
            tags: [Market]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            responses:
                200:
                    description: Gacha rolled successfully.
                400:
                    description: Status bad requests.
                500:
                    description: Internal server error.

    /market/gacha/{gacha_id}/buy:
        get:
            summary: Buy gacha
            tags: [Market]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            parameters:
                - name: gacha_id
                  in: path
                  description: Gacha ID
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Gacha bought successfully.
                400:
                    description: Status bad requests.

    /market/auction:
        post:
            summary: Create auction
            tags: [Market]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            requestBody:
                description: Create auction details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CreateAuction"
            responses:
                200:
                    description: Auction created successfully.
                400:
                    description: Status bad requests.

    /market/auction/list:
        get:
            summary: Get auction list
            tags: [Market]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            responses:
                200:
                    description: Auction list obtained successfully.
                400:
                    description: Status bad requests.

    /market/auction/{auction_id}:
        get:
            summary: Get auction details
            tags: [Market]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            parameters:
                - name: auction_id
                  in: path
                  description: Auction ID
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Auction details obtained successfully.
                400:
                    description: Status bad requests.
        delete:
            summary: Delete auction
            tags: [Market]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            parameters:
                - name: auction_id
                  in: path
                  description: Auction ID
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Auction deleted successfully.
                400:
                    description: Status bad requests.

    /market/auction/{auction_id}/bid:
        post:
            summary: Bid auction
            tags: [Market]
            security:
                - cookieAuth
            #     - oauth2:
            #           - user
            parameters:
                - name: auction_id
                  in: path
                  description: Auction ID
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Bid auction details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BidAuction"
            responses:
                200:
                    description: Auction bid successfully.
                400:
                    description: Status bad requests.

    # TODO:
    # - internal endpoints (not accessible by the user)

    ### ADMIN ###

    # TODO:
    # - internal endpoints (not accessible by the user)

components:
    securitySchemes:
        cookieAuth:
            type: apiKey
            in: cookie
            name: access_token
        # oauth2:
        #     type: oauth2
        #     flows:
        #         authorizationCode:
        #             authorizationUrl: https://localhost/oauth2/authorize
        #             tokenUrl: https://localhost/oauth2/token
        #             scopes:
        #                 user: User scope
        #                 admin: Admin scope

    schemas:
        Register:
            type: object
            properties:
                email:
                    type: string
                username:
                    type: string
                password:
                    type: string

        Login:
            type: object
            properties:
                username:
                    type: string
                password:
                    type: string

        AdminLogin:
            type: object
            properties:
                admin_id:
                    type: string
                password:
                    type: string
                otp_code:
                    type: string

        PatchUser:
            type: object
            properties:
                username:
                    type: string
                email:
                    type: string
                new_password:
                    type: string
                old_password:
                    type: string

        Token:
            # TODO: Check if correct
            type: object
            properties:
                grant_type:
                    type: string
                client_id:
                    type: string
                client_secret:
                    type: string
                redirect_uri:
                    type: string
                code:
                    type: string
                scope:
                    type: string

        BuyBugscoin:
            type: object
            properties:
                amount:
                    type: integer

        CreateAuction:
            type: object
            properties:
                gacha_id:
                    type: string
                end_time:
                    type: string

        BidAuction:
            type: object
            properties:
                bid_amount:
                    type: string
