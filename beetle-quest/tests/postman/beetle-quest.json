{
  "info": {
    "name": "Beetle Quest API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://reverse-proxy/api/v1",
      "type": "string"
    },
    {
      "key": "hostUrl",
      "value": "https://reverse-proxy",
      "type": "string"
    },
    {
      "key": "testUser",
      "value": "",
      "type": "string"
    },
    {
      "key": "testEmail",
      "value": "",
      "type": "string"
    },
    {
      "key": "testPasswd",
      "value": "",
      "type": "string"
    },
    {
      "key": "testCookie",
      "value": ""
    },
    {
      "key": "testID",
      "value": ""
    },
    {
      "key": "gachaId",
      "value": ""
    },
    {
      "key": "gachaName",
      "value": ""
    },
    {
      "key": "auctionTime",
      "value": ""
    },
    {
      "key": "auctionId",
      "value": ""
    },
    {
      "key": "newTestPasswd",
      "value": ""
    },
    {
      "key": "newTestUser",
      "value": ""
    },
    {
      "key": "newTestEmail",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "POST /auth/register",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"email\": \"{{testEmail}}\", \"username\": \"{{testUser}}\", \"password\": \"{{testPasswd}}\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let userName = pm.variables.replaceIn('{{$randomUserName}}')",
                  "",
                  "pm.collectionVariables.set('testPasswd', pm.variables.replaceIn('{{$randomPassword}}'))",
                  "pm.collectionVariables.set('testUser', userName)",
                  "pm.collectionVariables.set('testEmail', `${userName}@test.it`)",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response should be HTML', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "",
                  "if (pm.response.code !== 201) {",
                  "   pm.test('Status code is 400', function () {",
                  "     pm.response.to.have.status(400);",
                  "   });",
                  "   pm.test('Response should contain success message in HTML', function () {",
                  "       const responseBody = pm.response.text();",
                  "       pm.expect(responseBody).to.include('inserted username or mail are already in the system');",
                  "   });",
                  "} else {",
                  "   pm.test('Status code is 201', function () {",
                  "     pm.response.to.have.status(201);",
                  "   });",
                  "   pm.test('Response should contain success message in HTML', function () {",
                  "       const responseBody = pm.response.text();",
                  "       pm.expect(responseBody).to.include('User registered successfully!');",
                  "   });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /auth/login",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"username\": \"{{testUser}}\",\"password\": \"{{testPasswd}}\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jwt = pm.cookies.get('identity_token')",
                  "// console.log(jwt);",
                  "if (jwt) {",
                  "    const user_id = JSON.parse(atob(jwt.split('.')[1])).sub; ",
                  "    pm.collectionVariables.set('testID', user_id)",
                  "//    console.log('testID:', pm.collectionVariables.get('testID'));",
                  "} else {",
                  "    console.log('JWT not found.');",
                  "}",
                  "",
                  "// console.log('identity_token:', pm.cookies.get(jwt));",
                  "// pm.collectionVariables.set('testCookie', jwt)",
                  "",
                  "pm.test('Check if response is in HTML format', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "",
                  "pm.test('Check the response content', function () {",
                  "    const responseBody = pm.response.text();",
                  "    pm.expect(responseBody).to.include('OAuth2 Authorization with PKCE');",
                  "    pm.expect(responseBody).to.include('Select the scopes you want to request:');",
                  "    pm.expect(responseBody).to.include('User service');",
                  "    pm.expect(responseBody).to.include('Market service');",
                  "    pm.expect(responseBody).to.include('Gacha service');",
                  "    pm.expect(responseBody).to.include('Admin service');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Static",
      "item": [
        {
          "name": "GET /static/",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{hostUrl}}/static/",
              "host": ["{{hostUrl}}"],
              "path": ["static/"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "   pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response should be HTML', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "pm.test('Response should contain success message in HTML', function () {",
                  "     const responseBody = pm.response.text();",
                  "     pm.expect(responseBody).to.include('Beetle Quest');",
                  "     pm.expect(responseBody).to.include('Login');",
                  "     pm.expect(responseBody).to.include('Register');",
                  "     pm.expect(responseBody).to.include('Admin Login');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "auth": {
    "type": "jwt",
    "jwt": [
      {
        "key": "payload",
        "value": "{'sub': '744a2f4d-a693-4352-916e-64f4ef94b709'}",
        "type": "string"
      },
      {
        "key": "isSecretBase64Encoded",
        "value": true,
        "type": "boolean"
      },
      {
        "key": "secret",
        "value": "5t9Z+Rhx8iKaApbGtf+vRM72rzDNBQV4V7nwp0sNKME=",
        "type": "string"
      },
      {
        "key": "algorithm",
        "value": "HS512",
        "type": "string"
      },
      {
        "key": "addTokenTo",
        "value": "header",
        "type": "string"
      },
      {
        "key": "headerPrefix",
        "value": "Bearer",
        "type": "string"
      },
      {
        "key": "queryParamKey",
        "value": "token",
        "type": "string"
      },
      {
        "key": "header",
        "value": "{}",
        "type": "string"
      }
    ]
  }
}
