{
	"info": {
		"_postman_id": "7d236f55-4ac7-4bee-96c7-9b420be53391",
		"name": "Beetle Quest API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39361032"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "POST /auth/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response should be HTML', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"if (pm.response.code !== 201) {",
									"   pm.test('Status code is 400', function () {",
									"     pm.response.to.have.status(400);",
									"   });",
									"   pm.test('Response should contain success message in HTML', function () {",
									"       const responseBody = pm.response.text();",
									"       pm.expect(responseBody).to.include('inserted username or mail are already in the system');",
									"   });",
									"} else {",
									"   pm.test('Status code is 201', function () {",
									"     pm.response.to.have.status(201);",
									"   });",
									"   pm.test('Response should contain success message in HTML', function () {",
									"       const responseBody = pm.response.text();",
									"       pm.expect(responseBody).to.include('User registered successfully!');",
									"   });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\")",
									"",
									"pm.collectionVariables.set(\"testPasswd\", pm.variables.replaceIn(\"{{$randomPassword}}\"))",
									"pm.collectionVariables.set(\"testUser\", userName)",
									"pm.collectionVariables.set(\"testEmail\", `${userName}@test.it`)",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\": \"{{testEmail}}\", \"username\": \"{{testUser}}\", \"password\": \"{{testPasswd}}\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /auth/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 302', function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"//console.log('access_token:', pm.cookies.get('access_token'));",
									"//pm.collectionVariables.set('testCookie', pm.cookies.get('access_token'))",
									"",
									"const cookie = pm.cookies.get('access_token')",
									"",
									"if (cookie) {",
									"    pm.collectionVariables.set('testCookies', cookie);",
									"",
									"    const jwt_payload = cookie.split('.')[1];",
									"    const payload = JSON.parse(atob(jwt_payload))",
									"    const sub = payload.sub;",
									"    pm.collectionVariables.set('testID', sub)",
									"} else {",
									"    pm.expect.fail();",
									"}",
									"",
									"pm.test('Check redirect location', function () {",
									"    pm.expect(pm.response.headers.get('location')).to.include('/api/v1/auth/check_session');",
									"});",
									"// pm.test('Check if response is in HTML format', function () {",
									"//     pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"// });",
									"",
									"// pm.test('Check if response contains Account Market Gachas and Logout', function () {",
									"//     const responseBody = pm.response.text();",
									"//     pm.expect(responseBody).to.include('Account');",
									"//     pm.expect(responseBody).to.include('Market');",
									"//     pm.expect(responseBody).to.include('Gachas');",
									"//     pm.expect(responseBody).to.include('Logout');",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"{{testUser}}\",\"password\": \"{{testPasswd}}\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /auth/check_session",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Cookies are auto managed by Postman",
									"pm.test('Response status is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/check_session",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"check_session"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /auth/logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Response status is 302', function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
									"});",
									"",
									"// pm.test(\"Response contains 'Login'\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"Login\");",
									"// });",
									"// ",
									"// pm.test(\"Response contains 'Register'\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"Register\");",
									"// });",
									"// ",
									"// pm.test(\"Response contains 'Admin Login'\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"Admin Login\");",
									"// });"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Static",
			"item": [
				{
					"name": "GET /static/",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"pm.test('Response should be HTML', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"pm.test('Response should contain success message in HTML', function () {",
									"     const responseBody = pm.response.text();",
									"     pm.expect(responseBody).to.include('Beetle Quest');",
									"     pm.expect(responseBody).to.include('Login');",
									"     pm.expect(responseBody).to.include('Register');",
									"     pm.expect(responseBody).to.include('Admin Login');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostUrl}}/static/",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"static",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gachas & Market",
			"item": [
				{
					"name": "// Get cookies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 302', function () {",
									"    pm.response.to.have.status(302);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"{{testUser}}\",\"password\": \"{{testPasswd}}\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /gacha/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response should be HTML', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"pm.test('Response should contain \"Gacha List\"', function () {",
									"     const responseBody = pm.response.text();",
									"     pm.expect(responseBody).to.include('Gacha List');",
									"});",
									" // Save the ID of one gacha",
									"let regex = /<div class=\"gacha-item Legendary\">[\\s\\S]*?<h3>Druid Butterfly<\\/h3>[\\s\\S]*?<button[^>]*hx-get=\"([^\"]*?)\"[^>]*>Buy<\\/button>/;",
									"let match = pm.response.text().match(regex);",
									"",
									"if (match && match[1]) {",
									"    let requestPath = match[1];",
									"    //console.log('Buy-button request path for Druid Butterfly:', requestPath);",
									"",
									"    let idRegex = /\\/gacha\\/([^\\/]+)\\/buy/;",
									"    let idMatch = requestPath.match(idRegex);",
									"",
									"    if (idMatch && idMatch[1]) {",
									"        let gacha_id = idMatch[1];",
									"        console.log('gachaId:', gacha_id);",
									"        pm.collectionVariables.set('gachaId', gacha_id);",
									"    } else {",
									"        console.log('ID not found in the request path.');",
									"    }",
									"} else {",
									"    console.log('Druid Butterfly not found.');",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/gacha/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gacha",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /gacha/{{gachaId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test('Response contains the required fields', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name', 'Druid Butterfly');",
									"    pm.collectionVariables.set('gachaName', 'Druid Butterfly')",
									"    pm.expect(jsonData).to.have.property('rarity', '\\u0004');",
									"    pm.expect(jsonData).to.have.property('price', 30000);",
									"    pm.expect(jsonData).to.have.property('image_path', '/static/images/druid_butterfly_legendary.webp');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/gacha/{{gachaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gacha",
								"{{gachaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market/bugscoin/buy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('heck for successful return code', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check if response is in HTML format', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"pm.test('Check if response contains Bugscoin added successfully', function () {",
									"    pm.expect(pm.response.text()).to.include('Bugscoin added successfully');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"amount\": \"1234567890\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/market/bugscoin/buy",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"market",
								"bugscoin",
								"buy"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /market/gacha/{gachaId}/buy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('heck for successful return code', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check if response is in HTML format', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"pm.test('Check if response contains Gacha bought successfully', function () {",
									"    pm.expect(pm.response.text()).to.include('Gacha bought successfully');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/market/gacha/{{gachaId}}/buy",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"market",
								"gacha",
								"{{gachaId}}",
								"buy"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market/auction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let now = new Date();",
									"now.setHours(now.getHours() + 3);",
									"// Format the date to YYYY-MM-DDTHH:mm",
									"pm.collectionVariables.set('auctionTime', now.toISOString().slice(0, 16));",
									"//console.log(pm.collectionVariables.get('auctionTime'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Check for successful return code', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check if response is in HTML format', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"pm.test('Check if response contains Account Market Gachas and Logout', function () {",
									"    pm.expect(pm.response.text()).to.include('Auction created successfully');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"gacha_id\":\"{{gachaId}}\",\"end_time\":\"{{auctionTime}}\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/market/auction/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"market",
								"auction",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /market/auction/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('heck for successful return code', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check if response is in HTML format', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"pm.test('Check if response contains Roll Gacha', function () {",
									"    pm.expect(pm.response.text()).to.include('Roll Gacha');",
									"});",
									"",
									"pm.test('Gacha name found in the auction list', function () {",
									"    const gachaString = `<p>Gacha: ${pm.collectionVariables.get('gachaName')}</p>`;",
									"    let gachaFound = pm.response.text().includes(gachaString);",
									"    pm.expect(gachaFound).to.be.true;",
									"});",
									"",
									"const auctionIdRegex = /Auction ID: ([\\w-]+)/;",
									"const match = pm.response.text().match(auctionIdRegex);",
									"if (match && match[1]) {",
									"    const auctionId = match[1];",
									"    //console.log(`Extracted Auction ID: ${auctionId}`);",
									"    pm.collectionVariables.set('auctionId', auctionId);",
									"} else {",
									"    console.log('Auction ID not found.');",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/market/auction/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"market",
								"auction",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /market/auction/{{auctionId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Check for successful return code', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check if response is in HTML format', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"pm.test('Check if response contains Roll Gacha', function () {",
									"    pm.expect(pm.response.text()).to.include('Auction Details');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/market/auction/{{auctionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"market",
								"auction",
								"{{auctionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market/auction/{auctionId}/bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// TODO: test buy action from other user ",
									"pm.test('Check for 400 return code', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Check if response is in HTML format', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"pm.test('Check if response contains Auction deleted successfully', function () {",
									"    pm.expect(pm.response.text()).to.include('owner cannot bid');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"bid_amount\": \"1000\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/market/auction/{{auctionId}}/bid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"market",
								"auction",
								"{{auctionId}}",
								"bid"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /market/auction/{{auctionId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Check for successful return code', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check if response is in HTML format', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"pm.test('Check if response contains Auction deleted successfully', function () {",
									"    pm.expect(pm.response.text()).to.include('Auction deleted successfully');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/market/auction/{{auctionId}}?password={{testPasswd}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"market",
								"auction",
								"{{auctionId}}"
							],
							"query": [
								{
									"key": "password",
									"value": "{{testPasswd}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /gacha/user/{testID}/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test('Response should be JSON', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"pm.test('Response should contain user gacha list', function () {",
									"   var jsonData = pm.response.json();",
									"   var expectedItem = {",
									"       name: 'Druid Butterfly',",
									"       rarity: 4,",
									"       price: 30000,",
									"       image_path: '/static/images/druid_butterfly_legendary.webp'",
									"   };",
									"   var itemFound = jsonData.some(function(item) {",
									"       return item.name === expectedItem.name &&",
									"              item.rarity === expectedItem.rarity &&",
									"              item.price === expectedItem.price &&",
									"              item.image_path === expectedItem.image_path;",
									"   });",
									"   pm.expect(itemFound).to.be.true;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/gacha/user/{{testID}}/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gacha",
								"user",
								"{{testID}}",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /gacha/{{gachaId}}/user/{{testID}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test('Response should be JSON', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"pm.test('Response should contain gacha details', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name', pm.collectionVariables.get('gachaName'));",
									"    pm.expect(jsonData).to.have.property('rarity', 4);",
									"    pm.expect(jsonData).to.have.property('price', 30000);",
									"    pm.expect(jsonData).to.have.property('image_path', '/static/images/druid_butterfly_legendary.webp');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/gacha/{{gachaId}}/user/{{testID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gacha",
								"{{gachaId}}",
								"user",
								"{{testID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /market/gacha/roll",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('heck for successful return code', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check if response is in HTML format', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"pm.test('Check if response contains Account Market Gachas and Logout', function () {",
									"    pm.expect(pm.response.text()).to.include('Gacha successfully obtained, check your inventory!');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/market/gacha/roll",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"market",
								"gacha",
								"roll"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "// Get cookies",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 302', function () {",
									"    pm.response.to.have.status(302);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"{{testUser}}\",\"password\": \"{{testPasswd}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /user/account/{{testID}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test('Response should be HTML', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"pm.test('Response should contain success message in HTML', function () {",
									"    const responseBody = pm.response.text();",
									"    pm.expect(responseBody).to.include('Own gachas');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/account/{{testID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"account",
								"{{testID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH /user/account/{{testID}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test('Response should be HTML', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"pm.test('Response should contain success message in HTML', function () {",
									"    const responseBody = pm.response.text();",
									"    pm.expect(responseBody).to.include('User account updated successfully');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\")",
									"",
									"pm.collectionVariables.set(\"newTestPasswd\", pm.variables.replaceIn(\"{{$randomPassword}}\"))",
									"pm.collectionVariables.set(\"newTestUser\", userName)",
									"pm.collectionVariables.set(\"newTestEmail\", `${userName}@test.it`)",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"{{newTestUser}}\",\"email\": \"{{newTestEmail}}\",\"new_password\": \"{{newTestPasswd}}\",\"old_password\": \"{{testPasswd}}\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/user/account/{{testID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"account",
								"{{testID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /user/account/{{testID}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 303', function () {",
									"    pm.response.to.have.status(303);",
									"});",
									"",
									"// pm.test('Response should be HTML', function () {",
									"//     pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"// });",
									"// pm.test('Response should contain success message in HTML', function () {",
									"//      const responseBody = pm.response.text();",
									"//      pm.expect(responseBody).to.include('Beetle Quest');",
									"//      pm.expect(responseBody).to.include('Login');",
									"//      pm.expect(responseBody).to.include('Register');",
									"//      pm.expect(responseBody).to.include('Admin Login');",
									"// });"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/account/{{testID}}?password={{newTestPasswd}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"account",
								"{{testID}}"
							],
							"query": [
								{
									"key": "password",
									"value": "{{newTestPasswd}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reverse-proxy/api/v1",
			"type": "string"
		},
		{
			"key": "hostUrl",
			"value": "https://reverse-proxy",
			"type": "string"
		},
		{
			"key": "testUser",
			"value": "",
			"type": "string"
		},
		{
			"key": "testEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "testPasswd",
			"value": "",
			"type": "string"
		},
		{
			"key": "testCookies",
			"value": ""
		},
		{
			"key": "testID",
			"value": ""
		},
		{
			"key": "gachaId",
			"value": ""
		},
		{
			"key": "gachaName",
			"value": ""
		},
		{
			"key": "auctionTime",
			"value": ""
		},
		{
			"key": "auctionId",
			"value": ""
		},
		{
			"key": "newTestPasswd",
			"value": ""
		},
		{
			"key": "newTestUser",
			"value": ""
		},
		{
			"key": "newTestEmail",
			"value": ""
		}
	]
}
