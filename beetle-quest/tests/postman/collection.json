{
  "info": {
    "name": "Beetle Quest API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://reverse-proxy/api/v1",
      "type": "string"
    },
    {
      "key": "hostUrl",
      "value": "https://reverse-proxy",
      "type": "string"
    },
    {
      "key": "testUser",
      "value": "test",
      "type": "string"
    },
    {
      "key": "testEmail",
      "value": "test@email.com",
      "type": "string"
    },
    {
      "key": "testPasswd",
      "value": "123456",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "POST /auth/register",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"email\": \"{{testEmail}}\", \"username\": \"{{testUser}}\", \"password\": \"{{testPasswd}}\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response should be HTML', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "",
                  "if (pm.response.code !== 201) {",
                  "   pm.test('Status code is 400', function () {",
                  "     pm.response.to.have.status(400);",
                  "   });",
                  "   pm.test('Response should contain success message in HTML', function () {",
                  "       const responseBody = pm.response.text();",
                  "       pm.expect(responseBody).to.include('inserted username or mail are already in the system');",
                  "   });",
                  "} else {",
                  "   pm.test('Status code is 201', function () {",
                  "     pm.response.to.have.status(201);",
                  "   });",
                  "   pm.test('Response should contain success message in HTML', function () {",
                  "       const responseBody = pm.response.text();",
                  "       pm.expect(responseBody).to.include('User registered successfully!');",
                  "   });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /auth/login",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"username\": \"{{testUser}}\",\"password\": \"{{testPasswd}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jwt = pm.cookies.get('access_token')",
                  "if (jwt) {",
                  "    const user_id = JSON.parse(atob(jwt.split('.')[1])).sub; ",
                  "    pm.globals.set('testID', user_id)",
                  " //   console.log('testID:', user_id);",
                  "} else {",
                  "    console.log('JWT not found.');",
                  "}",
                  "",
                  "//console.log('access_token:', pm.cookies.get('access_token'));",
                  "pm.globals.set('testCookie', pm.cookies.get('access_token'))",
                  "",
                  "pm.test('Check if response is in HTML format', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "",
                  "pm.test('Check if response contains Account Market Gachas and Logout', function () {",
                  "    const responseBody = pm.response.text();",
                  "    pm.expect(responseBody).to.include('Account');",
                  "    pm.expect(responseBody).to.include('Market');",
                  "    pm.expect(responseBody).to.include('Gachas');",
                  "    pm.expect(responseBody).to.include('Logout');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /auth/check_session",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/check_session",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "check_session"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Cookies are auto managed by Postman",
                  "pm.test('Response status is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /auth/logout",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response status is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is HTML\", function () {",
                  "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                  "});",
                  "",
                  "pm.test(\"Response contains 'Login'\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Login\");",
                  "});",
                  "",
                  "pm.test(\"Response contains 'Register'\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Register\");",
                  "});",
                  "",
                  "pm.test(\"Response contains 'Admin Login'\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Admin Login\");",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Static",
      "item": [
        {
          "name": "GET /static/",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{hostUrl}}/static/",
              "host": ["{{hostUrl}}"],
              "path": ["static/"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "   pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response should be HTML', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "pm.test('Response should contain success message in HTML', function () {",
                  "     const responseBody = pm.response.text();",
                  "     pm.expect(responseBody).to.include('Beetle Quest');",
                  "     pm.expect(responseBody).to.include('Login');",
                  "     pm.expect(responseBody).to.include('Register');",
                  "     pm.expect(responseBody).to.include('Admin Login');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Gachas & Market",
      "item": [
        {
          "name": "// Get cookies",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"username\": \"{{testUser}}\",\"password\": \"{{testPasswd}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /gacha/list",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/gacha/list",
              "host": ["{{baseUrl}}"],
              "path": ["gacha", "list"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response should be HTML', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "pm.test('Response should contain \"Gacha List\"', function () {",
                  "     const responseBody = pm.response.text();",
                  "     pm.expect(responseBody).to.include('Gacha List');",
                  "});",

                  " // Save the ID of one gacha",
                  "let regex = /<div class=\"gacha-item Legendary\">[\\s\\S]*?<h3>Druid Butterfly<\\/h3>[\\s\\S]*?<button[^>]*hx-get=\"([^\"]*?)\"[^>]*>Buy<\\/button>/;",
                  "let match = pm.response.text().match(regex);",
                  "",
                  "if (match && match[1]) {",
                  "    let requestPath = match[1];",
                  "    //console.log('Buy-button request path for Druid Butterfly:', requestPath);",
                  "",
                  "    let idRegex = /\\/gacha\\/([^\\/]+)\\/buy/;",
                  "    let idMatch = requestPath.match(idRegex);",
                  "",
                  "    if (idMatch && idMatch[1]) {",
                  "        let gacha_id = idMatch[1];",
                  "        console.log('gachaId:', gacha_id);",
                  "        pm.environment.set('gachaId', gacha_id);",
                  "    } else {",
                  "        console.log('ID not found in the request path.');",
                  "    }",
                  "} else {",
                  "    console.log('Druid Butterfly not found.');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /gacha/{{gachaId}}",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/gacha/{{gachaId}}",
              "host": ["{{baseUrl}}"],
              "path": ["gacha", "{{gachaId}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function() {",
                  "    pm.response.to.have.jsonBody();",
                  "});",
                  "",
                  "pm.test('Response contains the required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name', 'Druid Butterfly');",
                  "    pm.globals.set('gachaName', 'Druid Butterfly')",
                  "    pm.expect(jsonData).to.have.property('rarity', '\\u0004');",
                  "    pm.expect(jsonData).to.have.property('price', 30000);",
                  "    pm.expect(jsonData).to.have.property('image_path', '/static/images/druid_butterfly_legendary.webp');",
                  "});"
                ]
              }
            }
          ]
        },

        {
          "name": "POST /market/bugscoin/buy",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"amount\": \"1234567890\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/market/bugscoin/buy",
              "host": ["{{baseUrl}}"],
              "path": ["market", "bugscoin", "buy"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('heck for successful return code', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Check if response is in HTML format', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "",
                  "pm.test('Check if response contains Bugscoin added successfully', function () {",
                  "    pm.expect(pm.response.text()).to.include('Bugscoin added successfully');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /market/gacha/{gachaId}/buy",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/market/gacha/{{gachaId}}/buy",
              "host": ["{{baseUrl}}"],
              "path": ["market", "gacha", "{{gachaId}}", "buy"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('heck for successful return code', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Check if response is in HTML format', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "",
                  "pm.test('Check if response contains Gacha bought successfully', function () {",
                  "    pm.expect(pm.response.text()).to.include('Gacha bought successfully');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /market/auction",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"gacha_id\":\"{{gachaId}}\",\"end_time\":\"{{auctionTime}}\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/market/auction",
              "host": ["{{baseUrl}}"],
              "path": ["market", "auction"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "let now = new Date();",
                  "now.setHours(now.getHours() + 3);",
                  "// Format the date to YYYY-MM-DDTHH:mm",
                  "pm.globals.set('auctionTime', now.toISOString().slice(0, 16));",
                  "//console.log(pm.globals.get('auctionTime'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Check for successful return code', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Check if response is in HTML format', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "",
                  "pm.test('Check if response contains Account Market Gachas and Logout', function () {",
                  "    pm.expect(pm.response.text()).to.include('Auction created successfully');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /market/auction/list",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/market/auction/list",
              "host": ["{{baseUrl}}"],
              "path": ["market", "auction", "list"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('heck for successful return code', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Check if response is in HTML format', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "",
                  "pm.test('Check if response contains Roll Gacha', function () {",
                  "    pm.expect(pm.response.text()).to.include('Roll Gacha');",
                  "});",
                  "",
                  "pm.test('Gacha name found in the auction list', function () {",
                  "    const gachaString = `<p>Gacha: ${pm.globals.get('gachaName')}</p>`;",
                  "    let gachaFound = pm.response.text().includes(gachaString);",
                  "    pm.expect(gachaFound).to.be.true;",
                  "});",
                  "",
                  "const auctionIdRegex = /Auction ID: ([\\w-]+)/;",
                  "const match = pm.response.text().match(auctionIdRegex);",
                  "if (match && match[1]) {",
                  "    const auctionId = match[1];",
                  "    //console.log(`Extracted Auction ID: ${auctionId}`);",
                  "    pm.globals.set('auctionId', auctionId);",
                  "} else {",
                  "    console.log('Auction ID not found.');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /market/auction/{{auctionId}}",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/market/auction/{{auctionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["market", "auction", "{{auctionId}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Check for successful return code', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Check if response is in HTML format', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "pm.test('Check if response contains Roll Gacha', function () {",
                  "    pm.expect(pm.response.text()).to.include('Auction Details');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /market/auction/{auctionId}/bid",
          "request": {
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"bid_amount\": \"1000\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/market/auction/{{auctionId}}}/bid",
              "host": ["{{baseUrl}}"],
              "path": ["market", "auction", "{{auctionId}}", "bid"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// TODO: test buy action from other user ",
                  "pm.test('Check for 400 return code', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Check if response is in HTML format', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "pm.test('Check if response contains Auction deleted successfully', function () {",
                  "    pm.expect(pm.response.text()).to.include('owner cannot bid');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE /market/auction/{{auctionId}}",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/market/auction/{{auctionId}}?password=",
              "host": ["{{baseUrl}}"],
              "path": ["market", "auction", "{{auctionId}}"],
              "query": [
                {
                  "key": "password",
                  "value": "{{testPasswd}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Check for successful return code', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Check if response is in HTML format', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "pm.test('Check if response contains Auction deleted successfully', function () {",
                  "    pm.expect(pm.response.text()).to.include('Auction deleted successfully');",
                  "});"
                ]
              }
            }
          ]
        },

        {
          "name": "GET /gacha/user/{testID}/list",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/gacha/user/{{testID}}/list",
              "host": ["{{baseUrl}}"],
              "path": ["gacha", "user", "{{testID}}", "list"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response should be JSON', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "pm.test('Response should contain user gacha list', function () {",
                  "   var jsonData = pm.response.json();",
                  "   var expectedItem = {",
                  "       name: 'Druid Butterfly',",
                  "       rarity: 4,",
                  "       price: 30000,",
                  "       image_path: '/static/images/druid_butterfly_legendary.webp'",
                  "   };",
                  "   var itemFound = jsonData.some(function(item) {",
                  "       return item.name === expectedItem.name &&",
                  "              item.rarity === expectedItem.rarity &&",
                  "              item.price === expectedItem.price &&",
                  "              item.image_path === expectedItem.image_path;",
                  "   });",
                  "   pm.expect(itemFound).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /gacha/{{gachaId}}/user/{{testID}}",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/gacha/{{gachaId}}/user/{{testID}}",
              "host": ["{{baseUrl}}"],
              "path": ["gacha", "{{gachaId}}", "user", "{{testID}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response should be JSON', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "pm.test('Response should contain gacha details', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name', pm.globals.get('gachaName'));",
                  "    pm.expect(jsonData).to.have.property('rarity', 4);",
                  "    pm.expect(jsonData).to.have.property('price', 30000);",
                  "    pm.expect(jsonData).to.have.property('image_path', '/static/images/druid_butterfly_legendary.webp');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /market/gacha/roll",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/market/gacha/roll",
              "host": ["{{baseUrl}}"],
              "path": ["market", "gacha", "roll"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('heck for successful return code', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Check if response is in HTML format', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "",
                  "pm.test('Check if response contains Account Market Gachas and Logout', function () {",
                  "    pm.expect(pm.response.text()).to.include('Gacha successfully obtained, check your inventory!');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "// Get cookies",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"username\": \"{{testUser}}\",\"password\": \"{{testPasswd}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /user/account/{{testID}}",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user/account/",
              "host": ["{{baseUrl}}"],
              "path": ["user", "account", "{{testID}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response should be HTML', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "pm.test('Response should contain success message in HTML', function () {",
                  "    const responseBody = pm.response.text();",
                  "    pm.expect(responseBody).to.include('Own gachas');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "PATCH /user/account/{{testID}}",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"username\": \"test2\",\"email\": \"\",\"new_password\": \"{{testPasswd}}\",\"old_password\": \"{{testPasswd}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/user/account/{{testID}}",
              "host": ["{{baseUrl}}"],
              "path": ["user", "account", "{{testID}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response should be HTML', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "pm.test('Response should contain success message in HTML', function () {",
                  "    const responseBody = pm.response.text();",
                  "    pm.expect(responseBody).to.include('User account updated successfully');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE /user/account/{{testID}}",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user/account/{{testID}}?password=",
              "host": ["{{baseUrl}}"],
              "path": ["user", "account", "{{testID}}"],
              "query": [
                {
                  "key": "password",
                  "value": "{{testPasswd}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response should be HTML', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "pm.test('Response should contain success message in HTML', function () {",
                  "     const responseBody = pm.response.text();",
                  "     pm.expect(responseBody).to.include('Beetle Quest');",
                  "     pm.expect(responseBody).to.include('Login');",
                  "     pm.expect(responseBody).to.include('Register');",
                  "     pm.expect(responseBody).to.include('Admin Login');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
