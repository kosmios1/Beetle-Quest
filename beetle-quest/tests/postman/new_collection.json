{
	"info": {
		"_postman_id": "d835d334-54fa-45d2-9535-112add2aa843",
		"name": "Beetle Quest API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39361032"
	},
	"item": [
		{
			"name": "Player endpoints",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "POST /auth/register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response should be HTML', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
											"});",
											"",
											"if (pm.response.code !== 201) {",
											"   pm.test('Status code is 400', function () {",
											"     pm.response.to.have.status(400);",
											"   });",
											"   pm.test('Response should contain success message in HTML', function () {",
											"       const responseBody = pm.response.text();",
											"       pm.expect(responseBody).to.include('inserted username or mail are already in the system');",
											"   });",
											"} else {",
											"   pm.test('Status code is 201', function () {",
											"     pm.response.to.have.status(201);",
											"   });",
											"   pm.test('Response should contain success message in HTML', function () {",
											"       const responseBody = pm.response.text();",
											"       pm.expect(responseBody).to.include('User registered successfully!');",
											"   });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\")",
											"",
											"pm.collectionVariables.set(\"testPasswd\", pm.variables.replaceIn(\"{{$randomPassword}}\"))",
											"pm.collectionVariables.set(\"testUser\", userName)",
											"pm.collectionVariables.set(\"testEmail\", `${userName}@test.it`)",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"email\": \"{{testEmail}}\", \"username\": \"{{testUser}}\", \"password\": \"{{testPasswd}}\"}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"pm.test(\"Location header is present\", function () {",
											"    pm.response.to.have.header(\"Location\");",
											"});",
											"",
											"pm.test(\"Set-Cookie header is present\", function () {",
											"    pm.response.to.have.header(\"Set-Cookie\");",
											"    pm.response.cookies.has(\"go_session_id\");",
											"",
											"    pm.collectionVariables.set(\"goSessionCookie\", pm.cookies.get(\"go_session_id\"));",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"username\": \"{{testUser}}\",\"password\": \"{{testPasswd}}\"}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /oauth/authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Retrieve 'code' query parameter from location header\", function () {",
											"    var locationHeader = pm.response.headers.get('Location');",
											"    pm.expect(locationHeader).to.include('code=');",
											"",
											"    var codeValue = locationHeader.split('code=')[1].split('&')[0];",
											"    pm.collectionVariables.set(\"oauthCode\", codeValue);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostUrl}}/oauth/authorize?response_type=code&client_id=beetle-quest&redirect_uri={{oauthCallback}}&scope=user, market, gacha&state={{state}}&code_challenge={{codeChallenge}}&code_challenge_method=S256",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"oauth",
										"authorize"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code"
										},
										{
											"key": "client_id",
											"value": "beetle-quest"
										},
										{
											"key": "redirect_uri",
											"value": "{{oauthCallback}}"
										},
										{
											"key": "scope",
											"value": "user, market, gacha"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "code_challenge",
											"value": "{{codeChallenge}}"
										},
										{
											"key": "code_challenge_method",
											"value": "S256"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /oauth/token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Access token should exist\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('access_token');",
											"",
											"    let access_token = pm.response.json()[\"access_token\"];",
											"    pm.collectionVariables.set(\"accessToken\", access_token);",
											"",
											"    let id_token = pm.response.json()[\"id_token\"];",
											"    pm.collectionVariables.set(\"idToken\", id_token);",
											"",
											"    const base64Url = access_token.split('.')[1];",
											"    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');",
											"    const jsonPayload = JSON.parse(require('atob')(base64));",
											"",
											"    pm.collectionVariables.set(\"testID\", jsonPayload[\"sub\"]);",
											"});",
											"",
											"pm.test(\"Token type should be bearer\", function () {",
											"    pm.expect(pm.response.json().token_type).to.equal('Bearer');",
											"});",
											"",
											"pm.test(\"Scope should include user, market, and gacha\", function () {",
											"    pm.expect(pm.response.json().scope).to.include('user', 'market', 'gacha');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{oauthCode}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{oauthCallback}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "beetle-quest",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{codeVerifier}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{hostUrl}}/oauth/token",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /auth/check_session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/check_session",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"check_session"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /auth/traefik/verify",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/traefik/verify",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"traefik",
										"verify"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Static",
					"item": [
						{
							"name": "GET /static/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"   pm.response.to.have.status(200);",
											"});",
											"pm.test('Response should be HTML', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
											"});",
											"pm.test('Response should contain success message in HTML', function () {",
											"    const responseBody = pm.response.text();",
											"    pm.expect(responseBody).to.include(\"check_session\");",
											"    //  pm.expect(responseBody).to.include('Beetle Quest');",
											"    //  pm.expect(responseBody).to.include('Login');",
											"    //  pm.expect(responseBody).to.include('Register');",
											"    //  pm.expect(responseBody).to.include('Admin Login');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostUrl}}/static/",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"static",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Gachas & Market",
					"item": [
						{
							"name": "GET /gacha/list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response should be HTML', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
											"});",
											"pm.test('Response should contain \"Gacha List\"', function () {",
											"     const responseBody = pm.response.text();",
											"     pm.expect(responseBody).to.include('Gacha List');",
											"});",
											" // Save the ID of one gacha",
											"let regex = /<div class=\"gacha-item Legendary\">[\\s\\S]*?<h3>Druid Butterfly<\\/h3>[\\s\\S]*?<button[^>]*hx-get=\"([^\"]*?)\"[^>]*>Buy<\\/button>/;",
											"let match = pm.response.text().match(regex);",
											"",
											"if (match && match[1]) {",
											"    let requestPath = match[1];",
											"    //console.log('Buy-button request path for Druid Butterfly:', requestPath);",
											"",
											"    let idRegex = /\\/gacha\\/([^\\/]+)\\/buy/;",
											"    let idMatch = requestPath.match(idRegex);",
											"",
											"    if (idMatch && idMatch[1]) {",
											"        let gacha_id = idMatch[1];",
											"        console.log('gachaId:', gacha_id);",
											"        pm.collectionVariables.set('gachaId', gacha_id);",
											"    } else {",
											"        console.log('ID not found in the request path.');",
											"    }",
											"} else {",
											"    console.log('Druid Butterfly not found.');",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gacha/list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /gacha/{{gachaId}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is JSON', function() {",
											"    pm.response.to.have.jsonBody();",
											"});",
											"",
											"pm.test('Response contains the required fields', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('name', 'Druid Butterfly');",
											"    pm.collectionVariables.set('gachaName', 'Druid Butterfly')",
											"    pm.expect(jsonData).to.have.property('rarity', 'Legendary');",
											"    pm.expect(jsonData).to.have.property('price', 30000);",
											"    pm.expect(jsonData).to.have.property('image_path', '/static/images/druid_butterfly_legendary.webp');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gacha/{{gachaId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										"{{gachaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /market/bugscoin/buy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('heck for successful return code', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Check if response is in HTML format', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
											"});",
											"",
											"pm.test('Check if response contains Bugscoin added successfully', function () {",
											"    pm.expect(pm.response.text()).to.include('Bugscoin added successfully');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"amount\": \"1234567890\"}"
								},
								"url": {
									"raw": "{{baseUrl}}/market/bugscoin/buy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"market",
										"bugscoin",
										"buy"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /market/gacha/{gachaId}/buy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('heck for successful return code', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Check if response is in HTML format', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
											"});",
											"",
											"pm.test('Check if response contains Gacha bought successfully', function () {",
											"    pm.expect(pm.response.text()).to.include('Gacha bought successfully');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/market/gacha/{{gachaId}}/buy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"market",
										"gacha",
										"{{gachaId}}",
										"buy"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /market/auction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let now = new Date();",
											"now.setHours(now.getHours() + 3);",
											"// Format the date to YYYY-MM-DDTHH:mm",
											"pm.collectionVariables.set('auctionTime', now.toISOString().slice(0, 16));",
											"//console.log(pm.collectionVariables.get('auctionTime'));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Check for successful return code', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Check if response is in HTML format', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
											"});",
											"",
											"pm.test('Check if response contains Account Market Gachas and Logout', function () {",
											"    pm.expect(pm.response.text()).to.include('Auction created successfully');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"gacha_id\":\"{{gachaId}}\",\"end_time\":\"{{auctionTime}}\"}"
								},
								"url": {
									"raw": "{{baseUrl}}/market/auction/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"market",
										"auction",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /market/auction/list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('heck for successful return code', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Check if response is in HTML format', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
											"});",
											"",
											"pm.test('Check if response contains Roll Gacha', function () {",
											"    pm.expect(pm.response.text()).to.include('Roll Gacha');",
											"});",
											"",
											"pm.test('Gacha name found in the auction list', function () {",
											"    const gachaString = `<p>Gacha: ${pm.collectionVariables.get('gachaName')}</p>`;",
											"    let gachaFound = pm.response.text().includes(gachaString);",
											"    pm.expect(gachaFound).to.be.true;",
											"});",
											"",
											"const auctionIdRegex = /Auction ID: ([\\w-]+)/;",
											"const match = pm.response.text().match(auctionIdRegex);",
											"if (match && match[1]) {",
											"    const auctionId = match[1];",
											"    //console.log(`Extracted Auction ID: ${auctionId}`);",
											"    pm.collectionVariables.set('auctionId', auctionId);",
											"} else {",
											"    console.log('Auction ID not found.');",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/market/auction/list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"market",
										"auction",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /market/auction/{{auctionId}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Check for successful return code', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Check if response is in HTML format', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
											"});",
											"pm.test('Check if response contains Roll Gacha', function () {",
											"    pm.expect(pm.response.text()).to.include('Auction Details');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/market/auction/{{auctionId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"market",
										"auction",
										"{{auctionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /market/auction/{auctionId}/bid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TODO: test buy action from other user ",
											"pm.test('Check for 400 return code', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test('Check if response is in HTML format', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
											"});",
											"pm.test('Check if response contains', function () {",
											"    pm.expect(pm.response.text()).to.include('owner cannot bid');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"bid_amount\": \"1000\"}"
								},
								"url": {
									"raw": "{{baseUrl}}/market/auction/{{auctionId}}/bid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"market",
										"auction",
										"{{auctionId}}",
										"bid"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /market/auction/{{auctionId}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Check for successful return code', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Check if response is in HTML format', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
											"});",
											"pm.test('Check if response contains Auction deleted successfully', function () {",
											"    pm.expect(pm.response.text()).to.include('Auction deleted successfully');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/market/auction/{{auctionId}}?password={{testPasswd}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"market",
										"auction",
										"{{auctionId}}"
									],
									"query": [
										{
											"key": "password",
											"value": "{{testPasswd}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /gacha/user/{testID}/list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 200', function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test('Response should be JSON', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"pm.test('Response should contain user gacha list', function () {",
											"   var jsonData = pm.response.json();",
											"   var expectedItem = {",
											"       name: 'Druid Butterfly',",
											"       rarity: 4,",
											"       price: 30000,",
											"       image_path: '/static/images/druid_butterfly_legendary.webp'",
											"   };",
											"   var itemFound = jsonData.some(function(item) {",
											"       return item.name === expectedItem.name &&",
											"              item.rarity === expectedItem.rarity &&",
											"              item.price === expectedItem.price &&",
											"              item.image_path === expectedItem.image_path;",
											"   });",
											"   pm.expect(itemFound).to.be.true;",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gacha/user/{{testID}}/list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										"user",
										"{{testID}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /gacha/{{gachaId}}/user/{{testID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 200', function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test('Response should be JSON', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"pm.test('Response should contain gacha details', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('name', pm.collectionVariables.get('gachaName'));",
											"    pm.expect(jsonData).to.have.property('rarity', 4);",
											"    pm.expect(jsonData).to.have.property('price', 30000);",
											"    pm.expect(jsonData).to.have.property('image_path', '/static/images/druid_butterfly_legendary.webp');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gacha/{{gachaId}}/user/{{testID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										"{{gachaId}}",
										"user",
										"{{testID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /market/gacha/roll",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('heck for successful return code', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Check if response is in HTML format', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
											"});",
											"",
											"pm.test('Check if response contains Account Market Gachas and Logout', function () {",
											"    pm.expect(pm.response.text()).to.include('Gacha successfully obtained, check your inventory!');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/market/gacha/roll",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"market",
										"gacha",
										"roll"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "GET /user/account/{{testID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 200', function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test('Response should be HTML', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
											"});",
											"pm.test('Response should contain success message in HTML', function () {",
											"    const responseBody = pm.response.text();",
											"    pm.expect(responseBody).to.include('Own gachas');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/account/{{testID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"account",
										"{{testID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH /user/account/{{testID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test('Response should be HTML', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
											"});",
											"pm.test('Response should contain success message in HTML', function () {",
											"    const responseBody = pm.response.text();",
											"    pm.expect(responseBody).to.include('User account updated successfully');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\")",
											"",
											"pm.collectionVariables.set(\"newTestPasswd\", pm.variables.replaceIn(\"{{$randomPassword}}\"))",
											"pm.collectionVariables.set(\"newTestUser\", userName)",
											"pm.collectionVariables.set(\"newTestEmail\", `${userName}@test.it`)",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"username\": \"{{newTestUser}}\",\"email\": \"{{newTestEmail}}\",\"new_password\": \"{{newTestPasswd}}\",\"old_password\": \"{{testPasswd}}\"}"
								},
								"url": {
									"raw": "{{baseUrl}}/user/account/{{testID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"account",
										"{{testID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /user/account/{{testID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 303', function () {",
											"    pm.response.to.have.status(303);",
											"});",
											"",
											"// pm.test('Response should be HTML', function () {",
											"//     pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
											"// });",
											"// pm.test('Response should contain success message in HTML', function () {",
											"//      const responseBody = pm.response.text();",
											"//      pm.expect(responseBody).to.include('Beetle Quest');",
											"//      pm.expect(responseBody).to.include('Login');",
											"//      pm.expect(responseBody).to.include('Register');",
											"//      pm.expect(responseBody).to.include('Admin Login');",
											"// });"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/account/{{testID}}?password={{newTestPasswd}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"account",
										"{{testID}}"
									],
									"query": [
										{
											"key": "password",
											"value": "{{newTestPasswd}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /auth/logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Response status is 302', function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
									"});",
									"",
									"// pm.test(\"Response contains 'Login'\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"Login\");",
									"// });",
									"// ",
									"// pm.test(\"Response contains 'Register'\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"Register\");",
									"// });",
									"// ",
									"// pm.test(\"Response contains 'Admin Login'\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"Admin Login\");",
									"// });"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin endpoints",
			"item": [
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// BASE 32 RFC 4648 compliant",
									"const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";",
									"const secret = pm.collectionVariables.get(\"otpSecret\");",
									"",
									"require('crypto-js').enc.u8array = {",
									"  /**",
									"   * Converts a word array to a Uint8Array.",
									"   *",
									"   * @param {WordArray} wordArray The word array.",
									"   *",
									"   * @return {Uint8Array} The Uint8Array.",
									"   *",
									"   * @static",
									"   *",
									"   * @example",
									"   *",
									"   *     var u8arr = CryptoJS.enc.u8array.stringify(wordArray);",
									"   */",
									"  stringify: function (wordArray) {",
									"    // Shortcuts",
									"    var words = wordArray.words;",
									"    var sigBytes = wordArray.sigBytes;",
									"",
									"    // Convert",
									"    var u8 = new Uint8Array(sigBytes);",
									"    for (var i = 0; i < sigBytes; i++) {",
									"      var byte = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;",
									"      u8[i] = byte;",
									"    }",
									"",
									"    return u8;",
									"  },",
									"",
									"  /**",
									"   * Converts a Uint8Array to a word array.",
									"   *",
									"   * @param {string} u8Str The Uint8Array.",
									"   *",
									"   * @return {WordArray} The word array.",
									"   *",
									"   * @static",
									"   *",
									"   * @example",
									"   *",
									"   *     var wordArray = CryptoJS.enc.u8array.parse(u8arr);",
									"   */",
									"  parse: function (u8arr) {",
									"    // Shortcut",
									"    var len = u8arr.length;",
									"",
									"    // Convert",
									"    var words = [];",
									"    for (var i = 0; i < len; i++) {",
									"      words[i >>> 2] |= (u8arr[i] & 0xff) << (24 - (i % 4) * 8);",
									"    }",
									"",
									"    return require('crypto-js').lib.WordArray.create(words, len);",
									"  },",
									"};",
									"",
									"function readChar (char) {",
									"  var idx = alphabet.indexOf(char)",
									"  if (idx === -1) {",
									"    throw new Error('Invalid character found: ' + char)",
									"  }",
									"  return idx",
									"}",
									"",
									"function decode(input) {",
									"  let length = input.length;",
									"  const leftover = (length * 5) % 8;",
									"  const offset = leftover === 0 ? 0 : 8 - leftover;",
									"  let bits = 0, value = 0, index = 0;",
									"  var output = new Uint8Array(Math.ceil((length * 5) / 8));",
									"  for (var i = 0; i < length; i++) {",
									"    value = (value << 5) | readChar(input[i]);",
									"    bits += 5;",
									"    if (bits >= 8) {",
									"      output[index++] = (value >>> (bits + offset - 8)) & 255;",
									"      bits -= 8;",
									"    }",
									"  }",
									"  if (bits > 0) {",
									"    output[index] = (value << (bits + offset - 8)) & 255;",
									"  }",
									"  if (leftover !== 0) {",
									"    output = output.slice(1);",
									"  }",
									"  return output;",
									"}",
									"",
									"const truncate = (digest) => {",
									"  const offset = digest[19] & 0xf; // last 4 bits",
									"",
									"  // take 4 bytes starting at the specified byte offset,",
									"  // but chop off the first bit so we have only 31 bits",
									"  const v =",
									"    ((digest[offset] & 0x7f) << 24) + // 0x7F = 01111111",
									"    (digest[offset + 1] << 16) +",
									"    (digest[offset + 2] << 8) +",
									"    digest[offset + 3];",
									"",
									"  return (v % 10**6).toString(10).padStart(6, \"0\");",
									"};",
									"",
									"const cryptoJSTotp = (interval, secret) => {",
									"  let digest = require('crypto-js').HmacSHA1(require('crypto-js').enc.Hex.parse(interval), require('crypto-js').enc.u8array.parse(decode(secret))).toString(require('crypto-js').enc.u8array);",
									"  return truncate(digest);",
									"};",
									"",
									"// current time, in seconds since the Unix epoch",
									"const time = Math.floor(new Date().getTime() / 1000);",
									"",
									"// how many 30-second intervals AND pad to 8 bytes = 16 hex characters",
									"const interval = Math.floor(time / 30)",
									"  .toString(16)",
									"  .padStart(16, \"0\");",
									"",
									"const otp = cryptoJSTotp(interval, secret);",
									"pm.collectionVariables.set(\"otpCode\", otp);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Location header is present\", function () {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"",
									"pm.test(\"Set-Cookie header is present\", function () {",
									"    pm.response.to.have.header(\"Set-Cookie\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"admin_id\": \"09087f45-5209-4efa-85bd-761562a6df53\",\n    \"password\": \"admin\",\n    \"otp_code\": \"{{otpCode}}\",\n    \"redirect\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/admin/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"admin",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /oauth/authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Retrieve 'code' query parameter from location header\", function () {",
									"    var locationHeader = pm.response.headers.get('Location');",
									"    pm.expect(locationHeader).to.include('code=');",
									"",
									"    var codeValue = locationHeader.split('code=')[1].split('&')[0];",
									"    pm.collectionVariables.set(\"oauthCode\", codeValue);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostUrl}}/oauth/authorize?response_type=code&client_id=beetle-quest&redirect_uri={{oauthCallback}}&scope=admin&state={{state}}&code_challenge={{codeChallenge}}&code_challenge_method=S256",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"oauth",
								"authorize"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "beetle-quest"
								},
								{
									"key": "redirect_uri",
									"value": "{{oauthCallback}}"
								},
								{
									"key": "scope",
									"value": "admin"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "code_challenge",
									"value": "{{codeChallenge}}"
								},
								{
									"key": "code_challenge_method",
									"value": "S256"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /oauth/token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Access token should exist\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('access_token');",
									"",
									"    let access_token = pm.response.json()[\"access_token\"];",
									"    pm.collectionVariables.set(\"accessToken\", access_token);",
									"",
									"    let id_token = pm.response.json()[\"id_token\"];",
									"    pm.collectionVariables.set(\"idToken\", id_token);",
									"});",
									"",
									"pm.test(\"Token type should be bearer\", function () {",
									"    pm.expect(pm.response.json().token_type).to.equal('Bearer');",
									"});",
									"",
									"pm.test(\"Scope should include user, market, and gacha\", function () {",
									"    pm.expect(pm.response.json().scope).to.include('admin');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{oauthCode}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "{{oauthCallback}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "beetle-quest",
									"type": "text"
								},
								{
									"key": "code_verifier",
									"value": "{{codeVerifier}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostUrl}}/oauth/token",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reverse-proxy/api/v1",
			"type": "string"
		},
		{
			"key": "hostUrl",
			"value": "https://reverse-proxy",
			"type": "string"
		},
		{
			"key": "oauthCallback",
			"value": "/fake/callback",
			"type": "default"
		},
		{
			"key": "state",
			"value": "1010010",
			"type": "string"
		},
		{
			"key": "codeVerifier",
			"value": "8f4a95a8a9ebdbecb0781bb24580b64eb02ed3d4d025182c93d19a97",
			"type": "string"
		},
		{
			"key": "codeChallenge",
			"value": "9Qcei7HNb5d1lxXWmxR-t9WboKImV_cJjcoQoxVCPJY",
			"type": "string"
		},
		{
			"key": "otpSecret",
			"value": "G2YTWH764PX5WZORXCBK2C2F2JHV74KD",
			"type": "string"
		},
		{
			"key": "goSessionCookie",
			"value": "",
			"type": "string"
		},
		{
			"key": "oauthCode",
			"value": "",
			"type": "default"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "idToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "testUser",
			"value": "",
			"type": "string"
		},
		{
			"key": "testEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "testPasswd",
			"value": "",
			"type": "string"
		},
		{
			"key": "testID",
			"value": ""
		},
		{
			"key": "gachaId",
			"value": ""
		},
		{
			"key": "gachaName",
			"value": ""
		},
		{
			"key": "auctionTime",
			"value": ""
		},
		{
			"key": "auctionId",
			"value": ""
		},
		{
			"key": "newTestPasswd",
			"value": ""
		},
		{
			"key": "newTestUser",
			"value": ""
		},
		{
			"key": "newTestEmail",
			"value": ""
		},
		{
			"key": "otpCode",
			"value": ""
		}
	]
}