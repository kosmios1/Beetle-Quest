{
  "info": {
    "name": "beetle_quest-user_service-unit_tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "public",
      "item": [
        {
          "name": "bad_user_request_public",
          "item": [
            {
              "name": "wrong password",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Response code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Password is not correct\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.expect(pm.response.text()).to.include('invalid password');",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"password\": \"nnnnnnn\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/user/account/{{userId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["user", "account", "{{userId}}"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get User Account Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test for successful response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "// Test for HTML content in response body",
                  "pm.test(\"Response body contains HTML content\", function () {",
                  "    pm.expect(pm.response.text()).to.include('<div class=\"account-container\">');",
                  "    pm.expect(pm.response.text()).to.include('<h2 class=\"account-header\">User Account</h2>');",
                  "    pm.expect(pm.response.text()).to.include('<p><strong>Username:</strong> Bob</p>');",
                  "    pm.expect(pm.response.text()).to.include('<p><strong>Email:</strong> bob@example.com</p>');",
                  "    pm.expect(pm.response.text()).to.include('<span>200</span>'); // Check if Currency is 200",
                  "});",
                  "// Test for content type header",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  "// Test for response time",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user/account/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user", "account", "{{userId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update User Account Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test for successful response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "// Test for HTML content in response body",
                  "pm.test(\"Response body contains HTML content\", function () {",
                  "    pm.expect(pm.response.text()).to.include('User account updated successfully');",
                  "});",
                  "// Test for content type header",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  "// Test for response time",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"Bob2\",\n    \"email\": \"bob2@test.com\",\n    \"old_password\": \"password\",\n    \"new_password\": \"password2\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/user/account/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user", "account", "{{userId}}"]
            }
          },
          "response": []
        },
        {
          "name": "User info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response body contains JSON content\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('currency');",
                  "    pm.expect(jsonData).to.have.property(\"email\");",
                  "    pm.expect(jsonData).to.have.property(\"sub\");",
                  "    pm.expect(jsonData).to.have.property(\"username\");",
                  "});",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json; charset=utf-8\");",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{hostUrl}}/userinfo",
              "host": ["{{hostUrl}}"],
              "path": ["userinfo"]
            }
          },
          "response": []
        },
        {
          "name": "Delete User Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test for successful response",
                  "pm.test(\"Status code is 303\", function () {",
                  "    pm.response.to.have.status(303);",
                  "});",
                  "",
                  "// Test for content type header",
                  "pm.test(\"Location is present\", function () {",
                  "    pm.response.to.have.header(\"Location\");",
                  "    pm.expect(pm.response.headers.get('Location')).to.equal('/api/v1/auth/logout');",
                  "});",
                  "",
                  "// Test for response time",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"password\": \"password2\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/user/account/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user", "account", "{{userId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "internal",
      "item": [
        {
          "name": "bad_user_request_internal",
          "item": [
            {
              "name": "bad request find user by username",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Response body contains 'user not found'\", function () {",
                      "    pm.expect(pm.response.text()).to.include('user not found');",
                      "});",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"Json\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/internal/user/find_by_username",
                  "host": ["{{baseUrl}}"],
                  "path": ["internal", "user", "find_by_username"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get all users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 200ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});",
                  "",
                  "pm.test(\"Response body has UserList property\", function () {",
                  "    pm.expect(pm.response.json()).to.have.property('UserList');",
                  "});",
                  "",
                  "pm.test(\"UserList contains an object with user_id, username, email, currency, and password_hash properties\", function () {",
                  "    pm.expect(pm.response.json().UserList[0]).to.have.property('user_id');",
                  "    pm.expect(pm.response.json().UserList[0]).to.have.property('username');",
                  "    pm.expect(pm.response.json().UserList[0]).to.have.property('email');",
                  "    pm.expect(pm.response.json().UserList[0]).to.have.property('currency');",
                  "    pm.expect(pm.response.json().UserList[0]).to.have.property('password_hash');",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/internal/user/get_all",
              "host": ["{{baseUrl}}"],
              "path": ["internal", "user", "get_all"]
            }
          },
          "response": []
        },
        {
          "name": "Find by id",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test for status code",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test for response time",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "// Test for response body properties",
                  "pm.test(\"Response body contains expected properties and values\", function () {",
                  "    const responseBody = pm.response.json();",
                  "    pm.expect(responseBody).to.have.property('user_id').to.eql([2,184,76,47,107,125,72,253,152,80,53,97,10,29,67,115]);",
                  "    pm.expect(responseBody).to.have.property('username', 'Alice');",
                  "    pm.expect(responseBody).to.have.property('email', 'alice@example.com');",
                  "    pm.expect(responseBody).to.have.property('currency', 200);",
                  "    pm.expect(responseBody).to.have.property('password_hash');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"user_id\": {{aliceUserIdAsByteArray}}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/internal/user/find_by_id",
              "host": ["{{baseUrl}}"],
              "path": ["internal", "user", "find_by_id"]
            }
          },
          "response": []
        },
        {
          "name": "Find by username",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test for status code",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test for response time",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "// Test for response body properties",
                  "pm.test(\"Response body contains expected properties and values\", function () {",
                  "    const responseBody = pm.response.json();",
                  "    pm.expect(responseBody).to.have.property('user_id').to.eql([2,184,76,47,107,125,72,253,152,80,53,97,10,29,67,115]);",
                  "    pm.expect(responseBody).to.have.property('username', 'Alice');",
                  "    pm.expect(responseBody).to.have.property('email', 'alice@example.com');",
                  "    pm.expect(responseBody).to.have.property('currency', 200);",
                  "    pm.expect(responseBody).to.have.property('password_hash');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"Alice\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/internal/user/find_by_username",
              "host": ["{{baseUrl}}"],
              "path": ["internal", "user", "find_by_username"]
            }
          },
          "response": []
        },
        {
          "name": "Create new user",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "",
                  "const { v4: uuidv4 } = require('uuid');",
                  "",
                  "const uuid = uuidv4();",
                  "const byteArray = uuid.replace(/-/g, '').match(/.{1,2}/g).map(hex => parseInt(hex, 16));",
                  "",
                  "let userName = pm.variables.replaceIn(\"{{$randomUserName}}\")",
                  "",
                  "pm.collectionVariables.set(\"newRandomUserId\", JSON.stringify(byteArray))",
                  "pm.collectionVariables.set(\"newRandomUsername\", userName)",
                  "pm.collectionVariables.set(\"newRandomEmail\", `${userName}@test.it`)",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response body contains message\", function () {",
                  "    pm.expect(pm.response.json().Message).to.equal(\"User created successfully\");",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 300ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(300);",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"user_id\": {{newRandomUserId}},\n    \"username\": \"{{newRandomUsername}}\",\n    \"email\": \"{{newRandomEmail}}\",\n    \"currency\": 1000,\n    \"password_hash\": {{passwordHash}}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/internal/user/create",
              "host": ["{{baseUrl}}"],
              "path": ["internal", "user", "create"]
            }
          },
          "response": []
        },
        {
          "name": "Update user",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let userName = pm.variables.replaceIn(\"{{$randomUserName}}\")",
                  "pm.collectionVariables.set(\"newRandomUsername\", userName)",
                  "pm.collectionVariables.set(\"newRandomEmail\", `${userName}@test.it`)",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User updated successfully\", function () {",
                  "    pm.expect(pm.response.json().Message).to.equal(\"User updated successfully\");",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 300ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(300);",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"user_id\": {{newRandomUserId}},\n    \"username\": \"{{newRandomUsername}}\",\n    \"email\": \"{{newRandomEmail}}\",\n    \"currency\": 1000,\n    \"password_hash\": {{otherPasswordHash}}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/internal/user/update",
              "host": ["{{baseUrl}}"],
              "path": ["internal", "user", "update"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "auth": {
    "type": "jwt",
    "jwt": [
      {
        "key": "payload",
        "value": "{\n    \"sub\": \"744a2f4d-a693-4352-916e-64f4ef94b709\"\n}",
        "type": "string"
      },
      {
        "key": "isSecretBase64Encoded",
        "value": true,
        "type": "boolean"
      },
      {
        "key": "secret",
        "value": "5t9Z+Rhx8iKaApbGtf+vRM72rzDNBQV4V7nwp0sNKME=",
        "type": "string"
      },
      {
        "key": "algorithm",
        "value": "HS512",
        "type": "string"
      },
      {
        "key": "addTokenTo",
        "value": "header",
        "type": "string"
      },
      {
        "key": "headerPrefix",
        "value": "Bearer",
        "type": "string"
      },
      {
        "key": "queryParamKey",
        "value": "token",
        "type": "string"
      },
      {
        "key": "header",
        "value": "{}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080/api/v1",
      "type": "default"
    },
    {
      "key": "hostUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "gachaId",
      "value": "96f8ced4-0305-43ad-9e52-779013fa8502",
      "type": "default"
    },
    {
      "key": "gachaIdByteArray",
      "value": "[150, 248, 206, 212, 3, 5, 67, 173, 158, 82, 119, 144, 19, 250, 133, 2]",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "744a2f4d-a693-4352-916e-64f4ef94b709",
      "type": "default"
    },
    {
      "key": "userIdByteArray",
      "value": "[116, 74, 47, 77, 166, 147, 67, 82, 145, 110, 100, 244, 239, 148, 183, 9]",
      "type": "string"
    },
    {
      "key": "aliceUserIdAsByteArray",
      "value": "[2,184,76,47,107,125,72,253,152,80,53,97,10,29,67,115]",
      "type": "string"
    },
    {
      "key": "newRandomUserId",
      "value": "",
      "type": "default"
    },
    {
      "key": "newRandomUsername",
      "value": ""
    },
    {
      "key": "newRandomEmail",
      "value": ""
    },
    {
      "key": "passwordHash",
      "value": "[36,50,97,36,49,48,36,119,90,57,102,53,79,66,81,108,65,50,52,84,56,118,83,88,113,89,54,53,101,56,101,82,85,87,79,107,65,71,97,52,90,74,107,115,118,88,57,48,46,76,122,87,102,67,65,75,111,88,46,79]",
      "type": "default"
    },
    {
      "key": "otherPasswordHash",
      "value": "[36,50,97,36,49,48,36,112,103,108,81,117,83,46,54,74,83,122,120,52,122,76,117,117,87,56,107,71,117,79,70,77,121,75,48,114,86,121,112,82,104,70,85,74,82,50,105,82,46,88,104,100,48,76,82,86,113,77,98,105]",
      "type": "string"
    }
  ]
}
