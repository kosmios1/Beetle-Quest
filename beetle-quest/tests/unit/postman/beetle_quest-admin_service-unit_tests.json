{
	"info": {
		"name": "beetle_quest-admin_service-unit_tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "admin_user_actions",
			"item": [
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(500);",
									"});",
									"",
									"// Test for response body properties",
									"pm.test(\"Response body has UserList property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('UserList');",
									"});",
									"",
									"pm.test(\"UserList contains user_id, username, email, currency, and password_hash\", function () {",
									"    var userList = pm.response.json().UserList[0];",
									"    pm.expect(userList).to.have.property('user_id');",
									"    pm.expect(userList).to.have.property('username');",
									"    pm.expect(userList).to.have.property('email');",
									"    pm.expect(userList).to.have.property('currency');",
									"    pm.expect(userList).to.have.property('password_hash');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/user/get_all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"user",
								"get_all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"User details obtained successfully\", function () {",
									"    pm.expect(pm.response.json().User.username).to.equal(\"Bob\");",
									"    pm.expect(pm.response.json().User.email).to.equal(\"bob@example.com\");",
									"    pm.expect(pm.response.json().User.currency).to.equal(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/user/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"User profile updated successfully\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User profile updated successfully!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"Bob2\",\n    \"email\": \"bob2@test.com\",\n    \"currency\": \"100000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/user/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user transaction history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response body has TransactionList as an array\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.be.an('object'); // Verifica che il corpo sia un oggetto",
									"    pm.expect(responseBody).to.have.property('TransactionList'); // Verifica che esista la proprietÃ  TransactionList",
									"    pm.expect(responseBody.TransactionList).to.be.an('array'); // Verifica che TransactionList sia un array",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/user/{{userId}}/transaction_history",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"user",
								"{{userId}}",
								"transaction_history"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user auction list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response body is not empty\", function () {",
									"    pm.expect(pm.response.json()).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/user/{{userId}}/auction/get_all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"user",
								"{{userId}}",
								"auction",
								"get_all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "admin_gacha_actions",
			"item": [
				{
					"name": "Add gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Gacha added successfully\", function () {",
									"    const responseBody = pm.response.text(); // Ottieni il corpo della risposta come testo",
									"    pm.expect(responseBody).to.include('Gacha added successfully!');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random UUID for gacha_id",
									"const { v4: uuidv4 } = require('uuid');",
									"",
									"const uuid = uuidv4();",
									"const byteArray = uuid.replace(/-/g, '').match(/.{1,2}/g).map(hex => parseInt(hex, 16));",
									"pm.environment.set('createGachaId', JSON.stringify(byteArray));",
									"",
									"// Generate a random gacha name",
									"const adjectives = ['Lucky', 'Mystic', 'Radiant', 'Golden', 'Silver', 'Crimson', 'Azure', 'Cosmic', 'Legendary', 'Epic'];",
									"const nouns = ['Dragon', 'Phoenix', 'Knight', 'Wizard', 'Warrior', 'Star', 'Gem', 'Guardian', 'Spirit', 'Hero'];",
									"",
									"const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];",
									"const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];",
									"pm.environment.set('createGachaName', `\"${randomAdjective} ${randomNoun}\"`);",
									"",
									"// Generate a random price between 100 and 1000",
									"const randomPrice = Math.floor(Math.random() * 901) + 100;",
									"pm.environment.set('createGachaPrice', randomPrice);",
									"",
									"// Generate a random image name",
									"const imagePrefix = ['item', 'gacha', 'character', 'weapon', 'artifact'];",
									"const randomPrefix = imagePrefix[Math.floor(Math.random() * imagePrefix.length)];",
									"const randomId = Math.floor(Math.random() * 1000).toString().padStart(3, '0');",
									"pm.environment.set('createGachaImageName', `${randomPrefix}_${randomId}`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"gacha_id\": {{createGachaId}},\n    \"name\": {{createGachaName}},\n    \"rarity\": \"Common\",\n    \"price\": \"2000\",\n    \"image_path\": \"/images/gacha/{{createGachaImageName}}.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/gacha/add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"gacha",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all gachas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response body is not empty\", function () {",
									"    pm.expect(pm.response.json()).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/gacha/get_all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"gacha",
								"get_all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get gacha details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Gacha details obtained successfully\", function () {",
									"    pm.response.to.have.jsonBody(\"gacha_id\", [150, 248, 206, 212, 3, 5, 67, 173, 158, 82, 119, 144, 19, 250, 133, 2]);",
									"    pm.response.to.have.jsonBody(\"name\", \"Mage Mosquito\");",
									"    pm.response.to.have.jsonBody(\"rarity\", 1);",
									"    pm.response.to.have.jsonBody(\"price\", 5000);",
									"    pm.response.to.have.jsonBody(\"image_path\", \"/static/images/mage_mosquito_uncommon.webp\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/gacha/{{mosquitogachaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"gacha",
								"{{mosquitogachaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update gacha details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful PATCH request",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(200);",
									"});",
									"",
									"pm.test(\"Response body does not contain error message\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Mage Mosquito3\",\n    \"rarity\": \"Rare\",\n    \"price\": \"500\",\n    \"image_path\": \"/images/mage_mosquito_uncommon.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/gacha/{{mosquitogachaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"gacha",
								"{{mosquitogachaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response body contains 'Gacha deleted successfully!'\", function () {",
									"    pm.expect(pm.response.text()).to.include('Gacha deleted successfully!');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/gacha/{{mosquitogachaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"gacha",
								"{{mosquitogachaId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "admin_market_actions",
			"item": [
				{
					"name": "Get market's transaction history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"MarketHistory exists\", () => {",
									"    const jsonData = pm.response.json(); ",
									"    pm.expect(jsonData).to.have.property(\"MarketHistory\"); ",
									"    pm.expect(jsonData.MarketHistory).to.be.not.null; ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/market/transaction_history",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"market",
								"transaction_history"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"All auction obtained successfully\", () => {",
									"    const jsonData = pm.response.json(); ",
									"",
									"    // Check if the 'AuctionList' property exists",
									"    pm.expect(jsonData).to.have.property(\"AuctionList\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/market/auction/get_all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"market",
								"auction",
								"get_all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get auctions details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"auction id is valid\", function () {",
									"    const response = pm.response.json(); // Ottiene la risposta JSON",
									"",
									"    pm.expect(response.auction_id).to.eql([119, 147, 79, 150, 56, 235, 66, 82, 164, 38, 115, 2, 172, 38, 213, 138]);",
									"    pm.expect(response.owner_id).to.eql([116, 74, 47, 77, 166, 147, 67, 82, 145, 110, 100, 244, 239, 148, 183, 9]);",
									"    pm.expect(response.gacha_id).to.eql([228, 85, 17, 60, 101, 92, 71, 141, 189, 36, 178, 165, 156, 17, 225, 243]);",
									"    pm.expect(response.winner_id).to.eql([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/market/auction/{{auction_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"market",
								"auction",
								"{{auction_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update auction details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful PATCH request",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(200);",
									"});",
									"",
									"pm.test(\"Response body does not contain error message\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gacha_id\": \"{{butterflygachaid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/market/auction/{{auction_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"market",
								"auction",
								"{{auction_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Internal",
			"item": [
				{
					"name": "bad_find_admin_id_request_internal",
					"item": [
						{
							"name": "bad Find admin by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(200);",
											"});",
											"",
											"pm.test(\"Admin not found\", () => {",
											"    // Parse the JSON response",
											"    const jsonData = pm.response.json();",
											"",
											"    // Check if the response contains the expected structure",
											"    pm.expect(jsonData).to.have.property(\"Error\");",
											"    pm.expect(jsonData.Error).to.equal(\"admin not found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"admin_id\": [9, 8, 127, 69, 82, 9, 78, 250, 133, 189, 118, 21, 98, 106, 223, 0]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/internal/admin/find_by_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"internal",
										"admin",
										"find_by_id"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Find admin by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(200);",
									"});",
									"",
									"pm.test(\"Admin data is valid\", function () {",
									"    const response = pm.response.json(); // Ottiene la risposta JSON",
									"    pm.expect(response.admin_id).to.eql([9, 8, 127, 69, 82, 9, 78, 250, 133, 189, 118, 21, 98, 166, 223, 83]);",
									"    pm.expect(response.password_hash).to.equal(\"JDJhJDEwJHNwNzcyNEttVEowLk80eGJVcXZRTXVMUzBGSnloTkNVc2xuWXh3V2haZmg4anc5cEQwZERX\");",
									"    pm.expect(response.otp_secret).to.equal(\"g2ytwh764px5wzorxcbk2c2f2jhv74kd\");",
									"    pm.expect(response.email).to.equal(\"admin@admin.com\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"admin_id\": [9, 8, 127, 69, 82, 9, 78, 250, 133, 189, 118, 21, 98, 166, 223, 83]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/internal/admin/find_by_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"internal",
								"admin",
								"find_by_id"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "jwt",
		"jwt": [
			{
				"key": "payload",
				"value": "{\n    \"sub\": \"744a2f4d-a693-4352-916e-64f4ef94b709\"\n}",
				"type": "string"
			},
			{
				"key": "isSecretBase64Encoded",
				"value": true,
				"type": "boolean"
			},
			{
				"key": "secret",
				"value": "5t9Z+Rhx8iKaApbGtf+vRM72rzDNBQV4V7nwp0sNKME=",
				"type": "string"
			},
			{
				"key": "algorithm",
				"value": "HS512",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "headerPrefix",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "queryParamKey",
				"value": "token",
				"type": "string"
			},
			{
				"key": "header",
				"value": "{}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/api/v1",
			"type": "default"
		},
		{
			"key": "mosquitogachaId",
			"value": "96f8ced4-0305-43ad-9e52-779013fa8502",
			"type": "default"
		},
		{
			"key": "butterflygachaid",
			"value": "e455113c-655c-478d-bd24-b2a59c11e1f3",
			"type": "string"
		},
		{
			"key": "gachaIdByteArray",
			"value": "[150, 248, 206, 212, 3, 5, 67, 173, 158, 82, 119, 144, 19, 250, 133, 2]",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "744a2f4d-a693-4352-916e-64f4ef94b709",
			"type": "default"
		},
		{
			"key": "userIdByteArray",
			"value": "[116, 74, 47, 77, 166, 147, 67, 82, 145, 110, 100, 244, 239, 148, 183, 9]",
			"type": "string"
		},
		{
			"key": "aliceUserIdAsByteArray",
			"value": "[2,184,76,47,107,125,72,253,152,80,53,97,10,29,67,115]",
			"type": "string"
		},
		{
			"key": "newRandomUserId",
			"value": "",
			"type": "default"
		},
		{
			"key": "newRandomUsername",
			"value": ""
		},
		{
			"key": "newRandomEmail",
			"value": ""
		},
		{
			"key": "passwordHash",
			"value": "[36,50,97,36,49,48,36,119,90,57,102,53,79,66,81,108,65,50,52,84,56,118,83,88,113,89,54,53,101,56,101,82,85,87,79,107,65,71,97,52,90,74,107,115,118,88,57,48,46,76,122,87,102,67,65,75,111,88,46,79]",
			"type": "default"
		},
		{
			"key": "otherPasswordHash",
			"value": "[36,50,97,36,49,48,36,112,103,108,81,117,83,46,54,74,83,122,120,52,122,76,117,117,87,56,107,71,117,79,70,77,121,75,48,114,86,121,112,82,104,70,85,74,82,50,105,82,46,88,104,100,48,76,82,86,113,77,98,105]",
			"type": "string"
		},
		{
			"key": "auction_id",
			"value": "77934f96-38eb-4252-a426-7302ac26d58a",
			"type": "default"
		},
		{
			"key": "butterflygachaidbytearray",
			"value": "[228, 85, 17, 60, 101, 92, 71, 141, 189, 36, 178, 165, 156, 17, 225, 243]",
			"type": "string"
		}
	]
}
