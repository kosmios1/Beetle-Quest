{
	"info": {
		"name": "beetle_quest-gacha_service-unit_tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "public",
			"item": [
				{
					"name": "bad_gacha_request_public",
					"item": [
						{
							"name": "bad request gachas details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response body contains 'gacha not found\", function () {",
											"    pm.expect(pm.response.text()).to.include('gacha not found');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gacha/96f8ced4-0305-43ad-9e52-779013fa850a",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										"96f8ced4-0305-43ad-9e52-779013fa850a"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get system gacha list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response body containing specific gacha items",
									"pm.test(\"Response body contains Munich Grasshopper\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Munich Grasshopper\");",
									"});",
									"",
									"pm.test(\"Response body contains Warrior Centipede\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Warrior Centipede\");",
									"});",
									"",
									"pm.test(\"Response body contains Druid Bee\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Druid Bee\");",
									"});",
									"",
									"pm.test(\"Response body contains Warrior Beetle\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Warrior Beetle\");",
									"});",
									"",
									"pm.test(\"Response body contains Druid Butterfly 1\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Druid Butterfly 1\");",
									"});",
									"",
									"pm.test(\"Response body contains Tank Mole Cricket\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Tank Mole Cricket\");",
									"});",
									"",
									"pm.test(\"Response body contains Warrior Locust\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Warrior Locust\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/gacha/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gacha",
								"list"
							]
						}
					},
					"response": [
						{
							"name": "System's gacha list.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gacha/list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										"list"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Status bad requests.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gacha/list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										"list"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gacha/list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										"list"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get user gacha details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Test for response body properties and correctness of the output",
									"pm.test(\"Response body has correct gacha_id, name, rarity, price, and image_path properties\", function () {",
									"    pm.expect(pm.response.json().gacha_id).to.eql([ 150, 248, 206, 212, 3, 5, 67, 173, 158, 82, 119, 144, 19, 250, 133, 2 ]);",
									"    pm.expect(pm.response.json().name).to.eql(\"Mage Mosquito\");",
									"    pm.expect(pm.response.json().rarity).to.eql(1);",
									"    pm.expect(pm.response.json().price).to.eql(5000);",
									"    pm.expect(pm.response.json().image_path).to.eql(\"/static/images/mage_mosquito_uncommon.webp\");",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/gacha/{{gachaId}}/user/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gacha",
								"{{gachaId}}",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": [
						{
							"name": "User gacha details.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gacha/:gacha_id/user/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										":gacha_id",
										"user",
										":user_id"
									],
									"variable": [
										{
											"key": "gacha_id"
										},
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Status bad requests.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gacha/:gacha_id/user/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										":gacha_id",
										"user",
										":user_id"
									],
									"variable": [
										{
											"key": "gacha_id"
										},
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Status not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gacha/:gacha_id/user/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										":gacha_id",
										"user",
										":user_id"
									],
									"variable": [
										{
											"key": "gacha_id"
										},
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gacha/:gacha_id/user/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										":gacha_id",
										"user",
										":user_id"
									],
									"variable": [
										{
											"key": "gacha_id"
										},
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get gacha details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Test for specific properties in the response body",
									"pm.test(\"Response body has gacha_id, name, rarity, price, and image_path properties with specific values\", function () {",
									"    pm.expect(pm.response.json().gacha_id).to.eql(\"96f8ced4-0305-43ad-9e52-779013fa8502\");",
									"    pm.expect(pm.response.json().name).to.eql(\"Mage Mosquito\");",
									"    pm.expect(pm.response.json().rarity).to.eql(\"Uncommon\");",
									"    pm.expect(pm.response.json().price).to.eql(5000);",
									"    pm.expect(pm.response.json().image_path).to.eql(\"/static/images/mage_mosquito_uncommon.webp\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/gacha/{{gachaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gacha",
								"{{gachaId}}"
							]
						}
					},
					"response": [
						{
							"name": "System's gacha details.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gacha/:gacha_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										":gacha_id"
									],
									"variable": [
										{
											"key": "gacha_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Status bad requests.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gacha/:gacha_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										":gacha_id"
									],
									"variable": [
										{
											"key": "gacha_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gacha/:gacha_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										":gacha_id"
									],
									"variable": [
										{
											"key": "gacha_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get user gacha list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Test for response body properties and correctness of the output",
									"pm.test(\"Response body has correct gacha_id, name, rarity, price, and image_path properties\", function () {",
									"    pm.expect(pm.response.json()[0].gacha_id).to.eql([ 150, 248, 206, 212, 3, 5, 67, 173, 158, 82, 119, 144, 19, 250, 133, 2 ]);",
									"    pm.expect(pm.response.json()[0].name).to.eql(\"Mage Mosquito\");",
									"    pm.expect(pm.response.json()[0].rarity).to.eql(1);",
									"    pm.expect(pm.response.json()[0].price).to.eql(5000);",
									"    pm.expect(pm.response.json()[0].image_path).to.eql(\"/static/images/mage_mosquito_uncommon.webp\");",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/gacha/user/{{userId}}/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gacha",
								"user",
								"{{userId}}",
								"list"
							]
						}
					},
					"response": [
						{
							"name": "User gacha list.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gacha/user/:user_id/list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										"user",
										":user_id",
										"list"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Status bad requests.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gacha/user/:user_id/list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										"user",
										":user_id",
										"list"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Status not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gacha/user/:user_id/list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										"user",
										":user_id",
										"list"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gacha/user/:user_id/list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										"user",
										":user_id",
										"list"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Get user gacha list",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gacha/user/{{userId}}/list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gacha",
										"user",
										"{{userId}}",
										"list"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": ":status",
									"value": 200
								},
								{
									"key": "content-security-policy",
									"value": "default-src 'self'; img-src 'self'; script-src 'self' 'unsafe-eval'; style-src 'self'"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=315360000; includeSubdomains"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "DENY"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-length",
									"value": "176"
								},
								{
									"key": "date",
									"value": "Sun, 01 Dec 2024 18:01:51 GMT"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"gacha_id\": [\n            150,\n            248,\n            206,\n            212,\n            3,\n            5,\n            67,\n            173,\n            158,\n            82,\n            119,\n            144,\n            19,\n            250,\n            133,\n            2\n        ],\n        \"name\": \"Mage Mosquito\",\n        \"rarity\": 1,\n        \"price\": 5000,\n        \"image_path\": \"/static/images/mage_mosquito_uncommon.webp\"\n    }\n]"
						}
					]
				}
			]
		},
		{
			"name": "internal",
			"item": [
				{
					"name": "bad_gacha_request_internal",
					"item": [
						{
							"name": "bad create gacha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Response body contains error message for existing gacha\", function () {",
											"    pm.expect(pm.response.json().Error).to.equal(\"gacha already exists\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gacha_id\": [198,22,220,172,20,199,71,9,154,123,80,77,195,25,137,240],\n    \"name\": \"Mage Mosquito\",\n    \"rarity\": 1,\n    \"price\": 500,\n    \"image_path\": \"/images/mage_mosquito_uncommon.png\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/internal/gacha/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"internal",
										"gacha",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random UUID for gacha_id",
									"const { v4: uuidv4 } = require('uuid');",
									"",
									"const uuid = uuidv4();",
									"const byteArray = uuid.replace(/-/g, '').match(/.{1,2}/g).map(hex => parseInt(hex, 16));",
									"pm.environment.set('createGachaId', JSON.stringify(byteArray));",
									"",
									"// Generate a random gacha name",
									"const adjectives = ['Lucky', 'Mystic', 'Radiant', 'Golden', 'Silver', 'Crimson', 'Azure', 'Cosmic', 'Legendary', 'Epic'];",
									"const nouns = ['Dragon', 'Phoenix', 'Knight', 'Wizard', 'Warrior', 'Star', 'Gem', 'Guardian', 'Spirit', 'Hero'];",
									"",
									"const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];",
									"const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];",
									"pm.environment.set('createGachaName', `\"${randomAdjective} ${randomNoun}\"`);",
									"",
									"// Generate a random price between 100 and 1000",
									"const randomPrice = Math.floor(Math.random() * 901) + 100;",
									"pm.environment.set('createGachaPrice', randomPrice);",
									"",
									"// Generate a random image name",
									"const imagePrefix = ['item', 'gacha', 'character', 'weapon', 'artifact'];",
									"const randomPrefix = imagePrefix[Math.floor(Math.random() * imagePrefix.length)];",
									"const randomId = Math.floor(Math.random() * 1000).toString().padStart(3, '0');",
									"pm.environment.set('createGachaImageName', `${randomPrefix}_${randomId}`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"gacha_id\": {{createGachaId}},\n    \"name\": {{createGachaName}},\n    \"rarity\": 1,\n    \"price\": {{createGachaPrice}},\n    \"image_path\": \"/images/gacha/{{createGachaImageName}}.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/internal/gacha/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"internal",
								"gacha",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const adjectives = ['Lucky', 'Mystic', 'Radiant', 'Golden', 'Silver', 'Crimson', 'Azure', 'Cosmic', 'Legendary', 'Epic'];",
									"const nouns = ['Dragon', 'Phoenix', 'Knight', 'Wizard', 'Warrior', 'Star', 'Gem', 'Guardian', 'Spirit', 'Hero'];",
									"",
									"const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];",
									"const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];",
									"pm.environment.set('createGachaName', `\"${randomAdjective} ${randomNoun}\"`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"gacha_id\": {{createGachaId}},\n    \"name\": {{createGachaName}},\n    \"rarity\": 1,\n    \"price\": {{createGachaPrice}},\n    \"image_path\": \"/images/gacha/{{createGachaImageName}}.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/internal/gacha/update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"internal",
								"gacha",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const adjectives = ['Lucky', 'Mystic', 'Radiant', 'Golden', 'Silver', 'Crimson', 'Azure', 'Cosmic', 'Legendary', 'Epic'];",
									"const nouns = ['Dragon', 'Phoenix', 'Knight', 'Wizard', 'Warrior', 'Star', 'Gem', 'Guardian', 'Spirit', 'Hero'];",
									"",
									"const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];",
									"const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];",
									"pm.environment.set('createGachaName', `\"${randomAdjective} ${randomNoun}\"`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"gacha_id\": {{createGachaId}},\n    \"name\": {{createGachaName}},\n    \"rarity\": 1,\n    \"price\": {{createGachaPrice}},\n    \"image_path\": \"/images/gacha/{{createGachaImageName}}.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/internal/gacha/delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"internal",
								"gacha",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user gachas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Verify the response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test 2: Verify the response body contains the GachaList array",
									"pm.test(\"Response body contains GachaList\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('GachaList');",
									"    pm.expect(pm.response.json().GachaList).to.be.an('array');",
									"});",
									"",
									"// Test 3: Verify the response GachaList array contains expected fields",
									"pm.test(\"GachaList array contains expected fields\", function () {",
									"    var gachaList = pm.response.json().GachaList;",
									"    pm.expect(gachaList).to.be.an('array').that.is.not.empty;",
									"    pm.expect(gachaList[0]).to.have.property('gacha_id').that.is.an('array');",
									"    pm.expect(gachaList[0]).to.have.property('name').that.is.a('string');",
									"    pm.expect(gachaList[0]).to.have.property('rarity').that.is.a('number');",
									"    pm.expect(gachaList[0]).to.have.property('price').that.is.a('number');",
									"    pm.expect(gachaList[0]).to.have.property('image_path').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": {{userIdByteArray}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/internal/gacha/get_user_gachas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"internal",
								"gacha",
								"get_user_gachas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove gacha from user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(200);",
									"});",
									"",
									"pm.test(\"Content-Length header is present\", function () {",
									"    pm.response.to.have.header(\"Content-Length\");",
									"});",
									"",
									"pm.test(\"Date header is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": {{userIdByteArray}},\n    \"gacha_id\": {{gachaIdByteArray}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/internal/gacha/remove_gacha_from_user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"internal",
								"gacha",
								"remove_gacha_from_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add gacha to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(200);",
									"});",
									"",
									"pm.test(\"Response headers contain Date and Content-Length\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Length\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": {{userIdByteArray}},\n    \"gacha_id\": {{gachaIdByteArray}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/internal/gacha/add_gacha_to_user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"internal",
								"gacha",
								"add_gacha_to_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user gachas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Verify the status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test 2: Verify the response time is less than 200ms",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(200);",
									"});",
									"",
									"// Test 3: Verify the response body is empty",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": {{userIdByteArray}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/internal/gacha/remove_user_gachas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"internal",
								"gacha",
								"remove_user_gachas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify gacha_id values\", function () {",
									"    pm.response.to.have.jsonBody(\"gacha_id\", [246, 151, 81, 81, 85, 84, 65, 96, 179, 205, 45, 90, 171, 84, 140, 207]);",
									"});",
									"",
									"pm.test(\"Verify name is in lowercase\", function () {",
									"    pm.expect(pm.response.json().name.toLowerCase()).to.equal(\"tank mole cricket\");",
									"});",
									"",
									"pm.test(\"Verify rarity value is 0\", function () {",
									"    pm.expect(pm.response.json().rarity).to.equal(0);",
									"});",
									"",
									"pm.test(\"Verify price is 3000\", function () {",
									"    pm.expect(pm.response.json().price).to.equal(3000);",
									"});",
									"",
									"pm.test(\"Verify image path is correct\", function () {",
									"    pm.expect(pm.response.json().image_path).to.equal(\"/static/images/tank_mole-cricket_common.webp\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"gacha_id\": \"f6975151-5554-4160-b3cd-2d5aab548ccf\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/internal/gacha/find_by_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"internal",
								"gacha",
								"find_by_id"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response body properties",
									"pm.test(\"Response body has GachaList property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('GachaList');",
									"});",
									"",
									"pm.test(\"GachaList contains gacha_id, name, rarity, price, and image_path properties\", function () {",
									"    pm.expect(pm.response.json().GachaList[0]).to.have.property('gacha_id');",
									"    pm.expect(pm.response.json().GachaList[0]).to.have.property('name');",
									"    pm.expect(pm.response.json().GachaList[0]).to.have.property('rarity');",
									"    pm.expect(pm.response.json().GachaList[0]).to.have.property('price');",
									"    pm.expect(pm.response.json().GachaList[0]).to.have.property('image_path');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/internal/gacha/get_all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"internal",
								"gacha",
								"get_all"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "jwt",
		"jwt": [
			{
				"key": "payload",
				"value": "{\n    \"sub\": \"744a2f4d-a693-4352-916e-64f4ef94b709\"\n}",
				"type": "string"
			},
			{
				"key": "isSecretBase64Encoded",
				"value": true,
				"type": "boolean"
			},
			{
				"key": "secret",
				"value": "5t9Z+Rhx8iKaApbGtf+vRM72rzDNBQV4V7nwp0sNKME=",
				"type": "string"
			},
			{
				"key": "algorithm",
				"value": "HS512",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "headerPrefix",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "queryParamKey",
				"value": "token",
				"type": "string"
			},
			{
				"key": "header",
				"value": "{}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/api/v1",
			"type": "default"
		},
		{
			"key": "gachaId",
			"value": "96f8ced4-0305-43ad-9e52-779013fa8502",
			"type": "default"
		},
		{
			"key": "gachaIdByteArray",
			"value": "[150, 248, 206, 212, 3, 5, 67, 173, 158, 82, 119, 144, 19, 250, 133, 2]",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "744a2f4d-a693-4352-916e-64f4ef94b709",
			"type": "default"
		},
		{
			"key": "userIdByteArray",
			"value": "[116, 74, 47, 77, 166, 147, 67, 82, 145, 110, 100, 244, 239, 148, 183, 9]",
			"type": "string"
		},
		{
			"key": "aliceUserIdAsByteArray",
			"value": "[2,184,76,47,107,125,72,253,152,80,53,97,10,29,67,115]",
			"type": "string"
		},
		{
			"key": "newRandomUserId",
			"value": "",
			"type": "default"
		},
		{
			"key": "newRandomUsername",
			"value": ""
		},
		{
			"key": "newRandomEmail",
			"value": ""
		},
		{
			"key": "passwordHash",
			"value": "[36,50,97,36,49,48,36,119,90,57,102,53,79,66,81,108,65,50,52,84,56,118,83,88,113,89,54,53,101,56,101,82,85,87,79,107,65,71,97,52,90,74,107,115,118,88,57,48,46,76,122,87,102,67,65,75,111,88,46,79]",
			"type": "default"
		},
		{
			"key": "otherPasswordHash",
			"value": "[36,50,97,36,49,48,36,112,103,108,81,117,83,46,54,74,83,122,120,52,122,76,117,117,87,56,107,71,117,79,70,77,121,75,48,114,86,121,112,82,104,70,85,74,82,50,105,82,46,88,104,100,48,76,82,86,113,77,98,105]",
			"type": "string"
		}
	]
}
