#tls:
#  certificates:
#    - certFile: /certs/cert.pem
#      keyFile: /certs/key.pem

tls:
    stores:
        default:
            defaultCertificate:
                certFile: /certs/cert.pem
                keyFile: /certs/key.pem
    certificates:
        - certFile: /certs/client_internal_cert.pem
          keyFile: /certs/client_internal_key.pem
          stores:
              - defaault
http:
    serversTransports:
        insecureTransport:
            serverName: "reverse-proxy"
            # clientAuthType: RequireAndVerifyClientCert
            certificates: # These are set as client certificates on mTLS
                - certFile: /certs/client_internal_cert.pem
                  keyFile: /certs/client_internal_key.pem
            rootCAs: # Root CAs to use when verifying server certificates.
                - /certs/cacert.pem

    middlewares:
        traefik-auth:
            forwardAuth:
                address: "https://auth-service/api/v1/auth/traefik/verify"
                tls:
                    ca: /certs/cacert.pem
                    cert: /certs/client_internal_cert.pem
                    key: /certs/client_internal_key.pem
        service-health-check:
            circuitBreaker:
                expression: "ResponseCodeRatio(500, 600, 0, 600) > 0.25 || NetworkErrorRatio() > 0.20"

        # root-redirect:
        #     redirectRegex:
        #         regex: "^https://localhost/$"
        #         replacement: "https://localhost/static"

    routers:
        # redirect-service:
        #     rule: "PathPrefix(`/`) && Host(`localhost`)"
        #     entryPoints:
        #         - websec
        #     service: static-service
        #     priority: 1
        #     tls: true
        #     middlewares:
        #         - "root-redirect"

        admin-service:
            rule: "PathPrefix(`/api/v1/admin`) && (Host(`localhost`) || Host(`reverse-proxy`))"
            entryPoints:
                - websec
            service: admin-service
            priority: 1
            tls: true
            middlewares:
                - "traefik-auth"
                - "service-health-check"

        auth-service:
            rule: "PathPrefix(`/api/v1/auth`) && (Host(`localhost`) || Host(`reverse-proxy`))"
            entryPoints:
                - websec
            service: auth-service
            priority: 1
            tls: true
            middlewares:
                - "service-health-check"

        user-service:
            rule: "PathPrefix(`/api/v1/user`) && (Host(`localhost`) || Host(`reverse-proxy`))"
            entryPoints:
                - websec
            service: user-service
            priority: 1
            tls: true
            middlewares:
                - "traefik-auth"
                - "service-health-check"

        gacha-service:
            rule: "PathPrefix(`/api/v1/gacha`) && (Host(`localhost`) || Host(`reverse-proxy`))"
            entryPoints:
                - websec
            service: gacha-service
            priority: 1
            tls: true
            middlewares:
                - "traefik-auth"
                - "service-health-check"

        market-service:
            rule: "PathPrefix(`/api/v1/market`) && (Host(`localhost`) || Host(`reverse-proxy`))"
            entryPoints:
                - websec
            service: market-service
            priority: 1
            tls: true
            middlewares:
                - "traefik-auth"
                - "service-health-check"

        static-service:
            rule: "PathPrefix(`/static`) && (Host(`localhost`) || Host(`reverse-proxy`))"
            entryPoints:
                - websec
            service: static-service
            priority: 1
            tls: true
            middlewares:
                - "service-health-check"

    services:
        admin-service:
            loadBalancer:
                serversTransport: insecureTransport
                servers:
                    - url: "https://admin-service"

        auth-service:
            loadBalancer:
                serversTransport: insecureTransport
                servers:
                    - url: "https://auth-service"

        user-service:
            loadBalancer:
                serversTransport: insecureTransport
                servers:
                    - url: "https://user-service"

        gacha-service:
            loadBalancer:
                serversTransport: insecureTransport
                servers:
                    - url: "https://gacha-service"

        market-service:
            loadBalancer:
                serversTransport: insecureTransport
                servers:
                    - url: "https://market-service"

        static-service:
            loadBalancer:
                serversTransport: insecureTransport
                servers:
                    - url: "https://static-service"
