name: beetle-quest

x-user-db-environments: &user-db-environments
  POSTGRES_HOST: user-db
  POSTGRES_PORT: 5432
  POSTGRES_SSLMODE: disable
  POSTGRES_TIMEZONE: Europe/Rome
  POSTGRES_USER: beetle
  POSTGRES_PASSWORD: secret
  POSTGRES_DB: beetle-quest-main-db

x-gacha-db-environments: &gacha-db-environments
  POSTGRES_HOST: gacha-db
  POSTGRES_PORT: 5432
  POSTGRES_SSLMODE: disable
  POSTGRES_TIMEZONE: Europe/Rome
  POSTGRES_USER: beetle
  POSTGRES_PASSWORD: secret
  POSTGRES_DB: beetle-quest-main-db

x-common-services-environments: &common-services-environments
  LOG_LEVEL: debug
  GIN_MODE: release
  JWT_SECRET_KEY: e6df59f91871f2229a0296c6b5ffaf44cef6af30cd05057857b9f0a74b0d28c1

x-common-oauth2-environments: &common-oauth2-environments
  OAUTH2_CLIENT_ID: beetle-quest
  OAUTH2_CLIENT_SECRET: secret

services:
  reverse-proxy:
    image: traefik:v3.2
    ports:
      # The Web UI
      - "127.0.0.1:8080:8080" # TODO: expose on 443
      # Listening Port
      - "127.0.0.1:80:80" # TODO: expose on 0.0.0.0:443:443
    networks:
      - internal
      - oauth2
    volumes:
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/rules.yml:/etc/traefik/rules.yml:ro

  # MICROSERVICES SECTION =============================================================================================================================================================================

  oauth2-server:
    build:
      context: ../
      dockerfile: deploy/oauth2/Dockerfile
    networks:
      - oauth2
    environment:
      <<: [*common-services-environments, *common-oauth2-environments]
      OAUTH2_CLIENT_DOMAIN: http://auth-service

      REDIS_HOST: oauth2-redis
      REDIS_PORT: 6379
      REDIS_USERNAME: beetle
      REDIS_PASSWORD: secret
      REDIS_DB: 0

  auth-service:
    build:
      context: ../
      dockerfile: deploy/auth/Dockerfile
    networks:
      - internal
      - oauth2
    environment:
      # TODO: Remove user-db-environments
      <<:
        [
          *common-oauth2-environments,
          *user-db-environments,
          *common-services-environments,
        ]
      OAUTH2_REDIRECT_URL: http://localhost/api/v1/auth/oauth2
      OAUTH2_AUTH_ENDPOINT: http://localhost/oauth2/authorize
      OAUTH2_TOKEN_ENDPOINT: http://oauth2-server:8080/oauth2/token

      OAUTH2_REVOKE_TOKEN_ENDPOINT: http://oauth2-server:8080/oauth2/token/revoke
      OAUTH2_VERIFY_TOKEN_ENDPOINT: http://oauth2-server:8080/oauth2/token/verify

      CREATE_USER_ENDPOINT: http://user-service:8080/api/v1/internal/user/create
      FIND_USER_BY_ID_ENDPOINT: http://user-service:8080/api/v1/internal/user/find_by_id
      FIND_USER_BY_USERNAME_ENDPOINT: http://user-service:8080/api/v1/internal/user/find_by_username

  user-service:
    build:
      context: ../
      dockerfile: deploy/user/Dockerfile
    networks:
      - internal
    environment:
      <<: [*common-services-environments, *user-db-environments]

  gacha-service:
    build:
      context: ../
      dockerfile: deploy/gacha/Dockerfile
    networks:
      - internal
    environment:
      <<: [*common-services-environments, *gacha-db-environments]

  static-service:
    build:
      context: ../
      dockerfile: deploy/static/Dockerfile
    networks:
      - internal
    environment:
      <<: [*common-services-environments]

  # DB SERVICES SECTION ===============================================================================================================================================================================
  oauth2-redis:
    image: redis:8.0-M02-alpine3.20
    command: "redis-server /usr/local/etc/redis/redis.conf"
    volumes:
      - ./oauth2/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - oauth2

  user-db:
    build:
      context: ./user/postgres
      dockerfile: ./Dockerfile
    networks:
      - internal
    environment:
      <<: *user-db-environments

  gacha-db:
    build:
      context: ./gacha/postgres
      dockerfile: ./Dockerfile
    networks:
      - internal
    environment:
      <<: *gacha-db-environments

networks:
  oauth2:
    driver: bridge
  internal:
    driver: bridge
  admin:
    driver: bridge
