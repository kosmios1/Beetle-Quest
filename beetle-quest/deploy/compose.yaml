name: beetle-quest

x-postgres-common-envs: &postgres-environments
    POSTGRES_HOST: monolith-db
    POSTGRES_PORT: 5432
    POSTGRES_SSLMODE: disable
    POSTGRES_TIMEZONE: Europe/Rome
    POSTGRES_USER: beetle
    POSTGRES_PASSWORD: secret
    POSTGRES_DB: beetle-quest-main-db

x-common-services-environments: &common-services-environments
    LOG_LEVEL: debug
    GIN_MODE: release
    JWT_SECRET_KEY: e6df59f91871f2229a0296c6b5ffaf44cef6af30cd05057857b9f0a74b0d28c1

x-common-oauth2-environments: &common-oauth2-environments
    OAUTH2_CLIENT_ID: beetle-quest
    OAUTH2_CLIENT_SECRET: secret

services:
    traefik:
        image: traefik:v3.2.0
        container_name: traefik
        command:
            - "--api.insecure=true"
            - "--api.dashboard=true"
            - "--providers.docker=true"
            - "--entrypoints.web.address=:80"
        ports:
            - "80:80"
            - "8080:8080" # Traefik dashboard
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock:ro"
        networks:
            - mynet
            - oauth2

    # MICROSERVICES SECTION ==============================================================================================================================================================================

    oauth2-server:
        build:
            context: ../
            dockerfile: deploy/oauth2/Dockerfile
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.oauth-server.rule=PathPrefix(`/oauth2`)"
            - "traefik.http.routers.oauth-server.entrypoints=web"
        networks:
            - oauth2
        environment:
            <<: [*common-services-environments, *common-oauth2-environments]
            OAUTH_CLIENT_DOMAIN: http://auth-service

    auth-service:
        build:
            context: ../
            dockerfile: deploy/auth/Dockerfile
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.auth-service.rule=PathPrefix(`/api/v1/auth`)"
            - "traefik.http.routers.auth-service.entrypoints=web"
        networks:
            - mynet
            - oauth2
        environment:
            <<: [*common-oauth2-environments, *postgres-environments, *common-services-environments]
            OAUTH2_REDIRECT_URL: http://localhost/api/v1/auth/oauth2
            OAUTH2_AUTH_ENDPOINT: http://localhost/oauth2/authorize
            OAUTH2_TOKEN_ENDPOINT: http://oauth2-server:8080/oauth2/token

    user-service:
        build:
            context: ../
            dockerfile: deploy/user/Dockerfile
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.user-service.rule=PathPrefix(`/api/v1/user`)"
            - "traefik.http.routers.user-service.entrypoints=web"
        networks:
            - mynet
        environment:
            <<: [*common-services-environments, *postgres-environments]

    gacha-service:
        build:
            context: ../
            dockerfile: deploy/gacha/Dockerfile
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.gacha-service.rule=PathPrefix(`/api/v1/gacha`)"
            - "traefik.http.routers.gacha-service.entrypoints=web"
        networks:
            - mynet
        environment:
            <<: [*common-services-environments, *postgres-environments]

    static-service:
        build:
            context: ../
            dockerfile: deploy/static/Dockerfile
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.static-service.rule=PathPrefix(`/static`)"
            - "traefik.http.routers.static-service.entrypoints=web"
        networks:
            - mynet
        environment:
            <<: [*common-services-environments]

    # DB SERVICES SECTION ===============================================================================================================================================================================
    # auth-redis:
    #     image: redis:7.4.1-alpine3.20
    #     command: redis-server --bind auth-redis --requirepass secret --maxmemory 256mb --maxmemory-policy allkeys-lru
    #     networks:
    #         - mynet

    monolith-db:
        build:
            context: ./postgres
            dockerfile: ./Dockerfile
        volumes:
            - ../../assets/images/:/images/
        networks:
            - mynet
        environment:
            <<: *postgres-environments

networks:
    oauth2:
        driver: bridge
    mynet:
        driver: bridge
    admin:
        driver: bridge
