name: beetle-quest

x-postgres-common-envs: &postgres-environments
    POSTGRES_HOST: monolith-db
    POSTGRES_PORT: 5432
    POSTGRES_SSLMODE: disable
    POSTGRES_TIMEZONE: Europe/Rome
    POSTGRES_USER: beetle
    POSTGRES_PASSWORD: secret
    POSTGRES_DB: beetle-quest-main-db

x-common-services-environments: &common-services-environments
    LOG_LEVEL: debug
    GIN_MODE: release

services:
    traefik:
        image: traefik:v3.2.0
        container_name: traefik
        command:
            - "--api.insecure=true"
            - "--api.dashboard=true"
            - "--providers.docker=true"
            - "--entrypoints.web.address=:80"
        ports:
            - "80:80"
            - "8080:8080" # Traefik dashboard
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock:ro"
        networks:
            - mynet

    # MICROSERVICES SECTION ==============================================================================================================================================================================

    # For now its ok but we need oath2, the security is based on a simple token and http header,
    # not beautiful, only to test how to use traefik forwardauth middleware
    auth-service:
        build:
            context: ../
            dockerfile: deploy/auth/Dockerfile
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.auth-service.rule=PathPrefix(`/api/v1/auth`)"
            - "traefik.http.routers.auth-service.entrypoints=web"
        depends_on:
            - auth-redis
            - monolith-db
        networks:
            - mynet
        environment:
            <<: [*postgres-environments, *common-services-environments]
            REDIS_HOST: auth-redis
            REDIS_PORT: 6379
            REDIS_PASSWD: secret
            REDIS_ENC_SECRET: 771f54268849fe96111562b311bf75947fba8f7f65929e6a2c6d524c8504148b
            REDIS_AUTH_SECRET: af9d1d23b413e193c17928559584e05548ab082ceea0c456e8f047664c662c46973e01e78a13b2ed47725baa92fcbabe7cd2dd221fd4eab3643402d1e17b6379

    user-service:
        build:
            context: ../
            dockerfile: deploy/user/Dockerfile
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.user-service.rule=PathPrefix(`/api/v1/user`)"
            - "traefik.http.routers.user-service.entrypoints=web"
            - "traefik.http.middlewares.test-auth.forwardauth.address=https://auth-service/api/v1/auth/authorize"
        networks:
            - mynet
        environment:
            <<: [*common-services-environments, *postgres-environments]

    gacha-service:
        build:
            context: ../
            dockerfile: deploy/gacha/Dockerfile
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.gacha-service.rule=PathPrefix(`/api/v1/gacha`)"
            - "traefik.http.routers.gacha-service.entrypoints=web"
            - "traefik.http.middlewares.test-auth.forwardauth.address=https://auth-service/api/v1/auth/authorize"
        networks:
            - mynet
        environment:
            <<: [*common-services-environments, *postgres-environments]

    static-service:
        build:
            context: ../
            dockerfile: deploy/static/Dockerfile
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.static-service.rule=PathPrefix(`/static`)"
            - "traefik.http.routers.static-service.entrypoints=web"
        networks:
            - mynet
        environment:
            <<: [*common-services-environments]

    # DB SERVICES SECTION ===============================================================================================================================================================================
    auth-redis:
        image: redis:7.4.1-alpine3.20
        command: redis-server --bind auth-redis --requirepass secret --maxmemory 256mb --maxmemory-policy allkeys-lru
        networks:
            - mynet

    monolith-db:
        build:
            context: ./postgres
            dockerfile: ./Dockerfile
        volumes:
            - ../../assets/images/:/images/
        networks:
            - mynet
        environment:
            <<: *postgres-environments

networks:
    mynet:
        driver: bridge
    admin:
        driver: bridge
