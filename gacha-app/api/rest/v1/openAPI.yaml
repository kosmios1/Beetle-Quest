openapi: 3.0.0
info:
    title: Gacha System API
    version: 1.0.1
    description: |
        This is an API for a gacha system where user can register, login, buy gacha items, roll for random gacha items, create auctions for gacha items, and bid on auctions. The system also has an admin interface to monitor the system and manage gacha items.

servers:
    - url: localhost:8080/api/v1

tags:
    - name: Users
      description: Endpoints related to user management.
    - name: Gachas
      description: Endpoints for gacha rolls, information, and collection management.
    - name: Auctions
      description: Endpoints to create and manage auctions for gachas.
    - name: Game
      description: Endpoints for games.
    # - name: PVP
      # description: Endpoints for player vs player battles.
    - name: Admin
      description: Endpoints for administrators to manage the system.

paths:
    /register:
        post:
            summary: Register a new user
            tags: [Users]
            parameters:
                - name: username
                  in: query
                  schema:
                      type: string
                - name: password
                  in: query
                  schema:
                      type: string
            requestBody:
                description: User registration details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Register"
            responses:
                201:
                    description: user registered successfully.
                400:
                    description: invalid request data.
                409:
                    description: username already exists.

    /login:
        post:
            summary: Login
            tags: [Users]
            parameters:
                - name: username
                  in: query
                  schema:
                      type: string
                - name: password
                  in: query
                  schema:
                      type: string
            requestBody:
                description: Login details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Login"
            responses:
                200:
                    description: Login successfull.
                    headers:
                        Set-Cookie:
                            schema:
                                type: string
                    # content:
                    #     application/json:
                    #         schema:
                    #             $ref: "#/components/schemas/User"
                400:
                    description: Invalid request data.
                401:
                    description: Invalid username or password.
                500:
                    description: Internal server error.

    /user/delete:
        delete:
            summary: Delete a user account
            tags: [Users]
            security:
                - authCookie: []
            responses:
                204:
                    description: User account deleted successfully.
                404:
                    description: User not found.

    /user/{user_uuid}:
        get:
            summary: Get details of a specific user
            tags: [Users]
            security:
                - authCookie: []
            parameters:
                - name: user_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: User details fetched successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserPublic"
                404:
                    description: User not found.
    
    /user/private/{user_uuid}:
        get:
            summary: Get details of own user account
            tags: [Users]
            security:
                - authCookie: []
            parameters:
                - name: uuid
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: User details fetched successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                404:
                    description: User not found.

    ### GACHA ENDPOINTS ###
    /gacha/list:
        get:
            summary: Get a list of all gachas
            tags: [Gachas]
            security:
                - authCookie: []
            responses:
                200:
                    description: List of gachas.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    total:
                                        type: integer
                                    gachas:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Gacha"
                404:
                    description: No gachas found.

    /gacha/buy:
        post:
            summary: Buy a gacha item with in-game currency
            tags: [Gachas]
            security:
                - authCookie: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                gacha_uuid:
                                    type: string
            responses:
                200:
                    description: Gacha item bought successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GachaResult"
                400:
                    description: "invalid request data."
                404:
                    description: "{user, gacha, gacha price} not found/insufficient currency."

    /gacha/roll:
        post:
            summary: Roll for a random gacha item. More the user spend bigger is the chance to obtain a good gacha.
            tags: [Gachas]
            security:
                - authCookie: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                currency_spent:
                                    type: integer
            responses:
                200:
                    description: gacha rolled successfully, item returned.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GachaResult"
                400:
                    description: invalid request data.
                404:
                    description: user not found/insufficient currency.

    /gacha/{gacha_uuid}:
        get:
            summary: Get details of a specific gacha.
            tags: [Gachas]
            security:
                - authCookie: []
            parameters:
                - name: gacha_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Gacha details fetched successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Gacha"
                404:
                    description: gacha not found.

    ### AUCTION ENDPOINTS ###
    /auction:
        post:
            summary: Create a new auction for a gacha item
            tags: [Auctions]
            security:
                - authCookie: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CreateAuctionData"
            responses:
                201:
                    description: Auction created successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Auction"
                400:
                    description: invalid request data.
                404:
                    description: "{user, gacha} not found/start price must be greater than 0/end time must be after start time."

    /auction/{auction_uuid}:
        get:
            summary: Get details of a specific auction
            tags: [Auctions]
            security:
                - authCookie: []
            parameters:
                - name: auction_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Auction details fetched successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Auction"
                404:
                    description: auction not found.
        delete:
            summary: Delete an auction
            tags: [Auctions]
            security:
                - authCookie: []
            parameters:
                - name: auction_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: auction deleted successfully.
                404:
                    description: auction not found.

    /auction/{auction_uuid}/bid:
        post:
            summary: Place a bid on an auction
            tags: [Auctions]
            security:
                - authCookie: []
            parameters:
                - name: auction_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#components/schemas/BidInput"
            responses:
                200:
                    description: Bid placed successfully.
                400:
                    description: invalid request data.
                404:
                    description: auction not found/user not found/insufficient currency.

    ### GAME ENDPOINTS ###
    /game/start:
        post:
            tags: [Game]
            summary: Start a new minigame
            description: Initializes a new game and returns the game ID and the initial game state.
            security:
                - authCookie: []
            requestBody:
                description: Game type to start
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                game_type:
                                    type: string
                                    example: tic-tac-toe
            responses:
                '201':
                    description: Game started successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    game_id:
                                        type: integer
                                        example: 1
                                    state:
                                        type: array
                                        description: The initial state of the game
                                        items:
                                            type: array
                                            items:
                                                type: string
                                        example: [["", "", ""], ["", "", ""], ["", "", ""]]
                '400':
                    description: Invalid request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: Invalid game type

    /game/play/{game_uuid}:
        post:
            tags: [Game]
            summary: Play a move in the game
            description: Send a move to the specified game and update the game state.
            security:
                - authCookie: []
            parameters:
                - in: path
                  name: game_uuid
                  required: true
                  schema:
                    type: integer
                  description: The ID of the game to play a move in
            requestBody:
                description: The move details
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                move:
                                    type: object
                                    properties:
                                        row:
                                            type: integer
                                            description: The row of the move
                                            example: 1
                                        col:
                                            type: integer
                                            description: The column of the move
                                            example: 1
                                        player:
                                            type: string
                                            description: The player making the move
                                            example: X
            responses:
                '200':
                    description: Move accepted or rejected
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: move accepted
                                    state:
                                        type: array
                                        description: The updated state of the game
                                        items:
                                            type: array
                                            items:
                                                type: string
                                                example: [["X", "", ""], ["", "X", ""], ["", "", ""]]
                '404':
                    description: Game not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: Game not found

    /game/state/{game_uuid}:
        get:
            tags: [Game]
            summary: Get the current game state
            description: Retrieves the current state of the game by its ID.
            security:
                - authCookie: []
            parameters:
                - in: path
                  name: game_uuid
                  required: true
                  schema:
                    type: integer
                  description: The ID of the game
            responses:
                '200':
                    description: Current game state returned
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    state:
                                        type: array
                                    items:
                                        type: array
                                        items:
                                            type: string
                                            example: [["X", "", ""], ["", "X", ""], ["", "", "O"]]
                '404':
                    description: Game not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                example: Game not found

    ### ADMIN ENDPOINTS ###
    /admin/monitor:
        get:
            summary: Get system status for admin
            tags: [Admin]
            security:
                - authCookie: []
            responses:
                200:
                    description: System statistics and monitoring information.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    total_users:
                                        type: integer
                                    active_auctions:
                                        type: integer
                                    completed_transactions:
                                        type: integer
                                    total_currency_in_game:
                                        type: integer

    /admin/users:
        get:
            summary: Get a list of all users
            tags: [Admin]
            security:
                - authCookie: []
            responses:
                200:
                    description: List of users.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    total:
                                        type: integer
                                    users:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/User"
                404:
                    description: No users found.

    /admin/gacha/{gacha_uuid}:
        post:
            summary: Add a new gacha item to the system
            tags: [Admin]
            security:
                - authCookie: []
            parameters:
                - name: gacha_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                              price: 
                                  type: integer
                              name:
                                  type: string
                              rarity:
                                  type: string
                              image_url:
                                  type: string
            responses:
                200:
                    description: Gacha added successfully.
                404:
                    description: Gacha not found.
        patch:
            summary: Update a gacha item
            tags: [Admin]
            security:
                - authCookie: []
            parameters:
                - name: gacha_uuid
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                              price: 
                                  type: integer
                              name:
                                  type: string
                              rarity:
                                  type: string
                              image_url:
                                  type: string
            responses:
                200:
                    description: Gacha updated successfully.
                404:
                    description: Gacha not found.

components:
    securitySchemes:
        authCookie:
            type: apiKey
            in: cookie
            name: auth_cookie

    schemas:
        UserPublic:
            type: object
            properties:
                user_uuid:
                    type: string
                username:
                    type: string
                gacha_collection:
                    type: array
                    items:
                        $ref: "#/components/schemas/Gacha"

        User:
            type: object
            properties:
                user_uuid:
                    type: string
                username:
                    type: string
                currency_amount:
                    type: integer
                gacha_collection:
                    type: array
                    items:
                        $ref: "#/components/schemas/Gacha"
                transaction_history:
                    type: array
                    items:
                        $ref: "#/components/schemas/Transaction"

        Register:
            type: object
            properties:
                email:
                    type: string
                username:
                    type: string
                password:
                    type: string

        Login:
            type: object
            properties:
                username:
                    type: string
                password:
                    type: string

        Gacha:
            type: object
            properties:
                gacha_uuid:
                    type: string
                name:
                    type: string
                rarity:
                    type: string
                image_url:
                    type: string

        GachaResult:
            type: object
            properties:
                gacha:
                    $ref: "#/components/schemas/Gacha"
                remaining_currency:
                    type: integer

        CreateAuctionData:
            type: object
            properties:
                gacha_uuid:
                    type: string
                start_price:
                    type: integer
                end_time:
                    type: string

        Auction:
            type: object
            properties:
                auction_uuid:
                    type: string
                owner_username:
                    type: string
                gacha_uuid:
                    type: string
                start_time:
                    type: string
                end_time:
                    type: string
                winner_username:
                    type: string
                biddings:
                    type: array
                    items:
                        $ref: "#components/schemas/Bid"

        BidInput:
            type: object
            properties:
                auction_uuid:
                    type: string
                bid_amount:
                    type: integer

        Bid:
            type: object
            properties:
                bid_uuid:
                    type: string
                currency_bidded:
                    type: integer
                bid_hash:
                    type: string
                previous_bid_hash:
                    type: string

        Transaction:
            type: object
            properties:
                transaction_uuid:
                    type: string
                amount:
                    type: integer
                timestamp:
                    type: string
                event_type:
                    type: string
                event_uuid:
                    type: string
                # gacha_uuid:
                #     type: string
        
        Minigame:
            type: object
            properties:
                minigame_uuid:
                    type: string
                name:
                    type: string
                description:
                    type: string
